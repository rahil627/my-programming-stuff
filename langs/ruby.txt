

see [play/ruby-limits.rb]
  - for an inquiry into how ruby data is stored
    - might as well just read the C code though..


!/usr/bin/env ruby

TODO: test using emacs with offline docs, to dev without the internet

spc-k-
TODO: ..maybe requires a local copy of ruby?..
  - definitely would be better than using the docs!!
TODO: research into a good setup for offline dev with ruby.. maybe there's already some useful tools out there..

spc-c[ode]-d[ocs]
  - module/method
  - seems to use ri as it's source..

spc-c-s
  - inf-ruby
    - irb in a buffer?
    - kinda works like lisp, in which you can throw in pieces of code to the dynamic runtime, to test bits
      - it's a really cool workflow, especially for testing regions of code..
      - can just send a region of var declarations, some functions/modules/classes, then run 'em interactively

ri --no-gems (shell command)
  - interactive ruby docs
  - for core + std-lib stuff: still 208 gems!
    - 250 with it, might include rails though..
    - important gems such as nokogiri aren't considered ruby/std
  - module[tab, tab] to see classes
  - module::class[tab, tab] to see methods
    - class methods aren't organized by super classes :/
 - CONCLUSION: AI + IDE (with jump to definition, class hierarchy panel, etc.) really is needed..
   - TODO: OR: maybe can just make a local copy of the ruby repo.. then try the emacs spc-k commands
type keyword, then press tab (in select mode)
  - not so good with modal text editing..












windows:
Linking ~\scoop\apps\ruby\current => ~\scoop\apps\ruby\3.3.4-1
Adding ~\scoop\apps\ruby\current\bin to your path.
Adding ~\scoop\apps\ruby\current\gems\bin to your path.



https://github.com/defunkt/choice
  - example of writing a simple dsl to parse cli options

  

ruby on windows not the best experience, but damn good:

https://www.reddit.com/r/ruby/comments/12z4j3g/is_ruby_still_a_hassle_to_work_with_on_windows/
  - "Here's the deal: WSL2 is 100% compatible and has great performance.

  It's still not as good as just using a Ubuntu desktop which is what you should do unless you are forced to use Windows, but the biggest pain is that the only editors that really work seamlessly are VSCode and Vim.

  I'm sorry, but for Ruby VSCode is just a text editor without many features besides syntax highlighting. Most of the plugins feel like they just barely work, and there is really nothing to help with ERB. The debugging is unbelievably hard to get working. Solargraph is impressive, but is more like a little spice that occasionally shines through than something you can really truly rely on. None of the other language servers are even close. If all you want is a fast text editor, then you may as well use Vim.

  So if you want RubyMine you have to use JetBrains' remote features, which suck, or Linux native RubyMine in WSLg, which also sucks for many obvious reasons including that it feels slow and has many window manager glitches. (Yet I have been told many times on reddit that WSLg is just fine by apparent masochists.)"


    - Indeed, I would also argue that VSCode's JavaScript, TypeScript, and React features are on par with JetBrains' plugins in many ways, offering better help and feedback and perfectly usable refactoring. It feels very smooth and reliable. That's why people love VSCode.



language specific:
https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/
  - succintly lists differences with python
  - i def prefer ruby in just about every decision!

https://github.com/martinmurciego/good-books/
  - a few ruby books, along with a few others




practice:
https://try.ruby-lang.org/
  - simple little interactive lang tutorial

https://learnbyexample.github.io/books/
 - practice examples 'n exercises for common cli stuff using ruby! :D  - ruby -e 'command' can be used to replace grep/sed/awk, and more
  - ruby one-liners cookbook
    - https://learnbyexample.github.io/learn_ruby_oneliners/one-liner-introduction.html
  - ruby regex




irb:
https://news.ycombinator.com/item?id=24637797
> Very similar to this idea, simply using ‘irb’ for one-off data munging and simple automations is very handy. That’s one of my go to tools when I am not sure exactly what I want to do with the data, and being able to poke at the intermediate steps as I transform it is handy. If I then come up with a pipeline that is useful, it only takes a minute to copy paste what I figured out in IRB to a file and save it as an executable script for future use.


cli & pipes:
https://www.honeybadger.io/blog/ruby-unix-command-line/

# not so useful...
echo "puts 2+2" | ruby

# useful!
ruby -e "puts 'code goes here'" arg1 arg2 argN
ruby -e 'puts ARGV.inspect' apples bananas pears oranges
["apples", "bananas", "pears", "oranges"]

# check web-page for a reg-ex using only ruby
ruby -e "require 'open-uri'; puts open(ARGV.first).read.scan(/starr/i).count" <url here>

# piping 101
cat moby-dick.txt | ruby -e "puts STDIN.read"
(outputs entire text)

# combining with another unix tool for fetching
curl <MY URL> | ruby -e "puts STDIN.read.scan(/starr/i).size"

# loop through lines and do something (print file extensions)
ls | ruby -e 'STDIN.each_line { |l| puts l.split(".").last }'
# same thing using -n to loop each line, and $_ meaning the current line
ls | ruby -n -e 'puts $_.split(".").last'




some notes:
method!
  - '!' denotes the object is altered/mutated




useful gems:

sequel
  - database toolkit

gui
  - https://www.reddit.com/r/ruby/comments/10rugw3/2023_best_ruby_gui_library/
    - in general, ruby, like haxe, just doesn't have enough support for gui, it would have to just bind Qt, GTK, or another cross-platform gui framework written in C/C++
  - https://github.com/AndyObtiva/glimmer
    - DSL wrapper for many (retained) gui back-ends
    - similar to haxe-ui
  - https://github.com/vaiorabbit/ruby-imgui
    - imgui wrapper

ffi
  - https://www.rubyguides.com/2019/05/ruby-ffi/
    - grabs a function from C's std lib libc
    - use VLC media player's lib (written in C)

rubyinline
  - https://github.com/seattlerb/rubyinline
  - run ffi code inline (in a ruby code file)!

opal
  - ruby to js transpiler









# start a new project

# create a Gemfile in the working directory with the following lines:
source "https://rubygems.org"
# gem 'gem-to-include'

# installs all gems using the Gemfile
bundle install
# make sure it's installed in the right place
# bundle info gem-name


# add a debugger
# ensure rdbg debug extension is installed
# control+shift+l in vscode, then click add config file, select rdgb
# press 'debug current file with rdbg', add command flags, then can add breakpoints 'n debug!


# use a LSP

# OPTION: using Ruby LSP (by shopify), rather still new as of 2023
# if the vs code extension doesn't exist, install it manually by file
# https://www.reddit.com/r/ruby/comments/124vb7i/vscode_now_has_documentation_for_ruby/
# https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp
# (in the version history tab)
# https://github.com/Shopify/vscode-ruby-lsp
# https://github.com/Shopify/vscode-ruby-lsp/issues/782
# no need to do anything! :)
# should start automatically once a ruby file is opened, or a project folder with it is opened
# if not, use command '>Ruby LSP Start'
# to debug use command '>Debug: Add configuration...'



# OPTION: using solargraph lsp
# create a Gemfile in the working directory with the following lines:
source "https://rubygems.org"
gem 'solargraph', group: :development # lsp
# gem 'gem-to-include'

# automatically add docs
# should have had this setup
# yard config --install-yri

# manually add docs
# re-generates docs for ALL gems
# run from anywhere?
# TODO: is this necessary to do every-time you add a gem??
yard gems

# generate docs for gems only used in the project? (to .yardoc/)
# run in project directory
yard docs





# making a gem
# use bundler
???





# formatters
all of the formatters (rubocop, rubyfmt, prettier, etc.) are options in the main ruby vscode extension's settings

rubocop does more than formatting, it's a deep linter that'll fix 'n optimize your code

rubocop
  - the first main one
  - **comes pre-installed with ruby**
prettier
  - came after rubocop, based on javascript's prettier linter
standard
  - a standard immutable config (because people can't agree), using rubocop
rufo
  - like standard but with a different taste/opinion
rubyfmt
  - written in rust and very fast













solargraph:
another lsp that's more featureful, but takes more effort to work: must use the yard gem to generate docs (as opposed to the standard rdoc, which the main ruby lsp uses)

https://www.reddit.com/r/ruby/comments/ml3zs2/which_one_is_a_better_vs_code_language_server_for/
  -  "Solargraph has more features. It can inference types and preview docs. But it requires building yard docs for all your gems, which can take a lot of time and be a big hassle."
  - The vscode-solargraph extension is designed to work well alongside vscode-ruby. I frequently use both, typically with `"ruby.useLanguageServer": false` so code intelligence features like autocompletion come from Solargraph.

    If you use vscode-ruby primarily for the debugger, vscode-ruby-debug is also an option.

# add this to the Gemfile
gem 'solargraph', group: :development

# install yard cli
# TODO: conflicts with 'gem install yard'??
sudo pacman -S ruby-yard

# generate docs for all ruby gems
# yard gems









can use binding.pry in code to break it and inspect everything up to that point
pry replaces irb (comes bundled with ruby)? or use both?
`cat filename`.capitalize
or
`cat filename`.pry # "goes into" the returned string, then can execute string methods
capitalize!
provides a very interactive way to use ruby, learning it's common methods along the way
can completely replace shell for most stuff


SUPER COOL STUFF

https://github.com/pry/pry#command-shell-integration
`ls -l`.split("\n")
  - normally use back-ticks for command substitution

file_names=`ls -l`
  - store it in a temp repl var

.cat #{Dir['*'].sample} | wc -l
  - use . to begin running a shell command (instead of using pry)
  - use string interpolation like syntax "#{string}", without quotes, to interpolate ruby code

.echo #{puts object} | rg '2' # searches the object.to_s

.echo #{p 'ls`.upcase() + `ls`} | rg doc
  - can even combine command sub with shell-mode



gem install pry-doc

# irb
# ruby's default repl irb is awesome, containing autocomplete!

# ri
# ruby's console app to search documentation
# Class#method
rdoc # re-builds docs?

# ruby comes with a web-server!
ruby -run -e httpd

# find maintained libs here
https://www.ruby-toolbox.com/
  - , great for choosing the best lib for a specific purpose (category)
https://github.com/markets/awesome-ruby

# debug
try the user castwide's (maintainer of solargraph) debug extension

https://marketplace.visualstudio.com/items?itemName=KoichiSasada.vscode-rdbg
  - can try? vs pry?







# just do it & ref

https://github.com/planetjekyll/awesome-jekyll-plugins
https://github.com/benbalter/
  - wrote most of the plugins thate are included by default for Jekyll
  - ***extremely* clean design**, beautiful really... i love it!!! :D
    - but i'm not really sure if that's better than just writing it all in a single main function..., if it were actually used as a class, it'd make sense... but i guess this is the ruby "everything is an object" way..?
  - for example: https://github.com/benbalter/jekyll-titles-from-headings/blob/main/lib/jekyll-titles-from-headings/generator.rb

then, after reading some plugins, you'll be able to read Jekyll itself! :o
https://github.com/jekyll/jekyll/tree/master/lib


## ref
https://github.com/ruby/ruby
  - open-source :)
  - https://github.com/ruby/ruby/tree/master/lib

https://hyperpolyglot.org/scripting
  - great to see where it differs and excels over python

https://github.com/markets/awesome-ruby
  - **github** (?? no way!!), gitlab, discourse, mastodon, jekyll, tons of web frameworks 'n templating languages... whoa... i didn't even know...

https://github.com/trending?l=ruby

https://www.ruby-lang.org/
  - official site

https://docs.ruby-lang.org/en/master/
  - official docs, also on github?

https://www.rubydoc.info
  - like a package manager, but for docs. includes the readme of each package

http://ruby-doc.com/docs/ProgrammingRuby/
  - a complete book, wordy, tons of examples, very comprehensive, looks great!
  - the page on "Object-Oriented Design Libraries" is great, as i've never heard about them
  - "built-in classes and methods"
  - "standard library"
  - "threads and processes"

https://en.m.wikibooks.org/wiki/Ruby_Programming
  - feels like an alt unofficial site




# tools
https://www.ruby-lang.org/en/documentation/
  - contains a list of IDEs, text editors, 'n plugins
  - for vim, vim-ruby and RSense are mentioned
    - RSense is also used for emacs
  - from a reddit post dated ~2020, RubyMine (JetBrains) vs VS Code, it seemed VS Code was taking over, along with simpler editors like atom, vim, etc., but it sounded like many people have problems, probably because of use of Ruby's complex features not working well with the language server...



useful libs:
https://docs.ruby-lang.org/en/master/English.html
  - basically, you can alias anything in ruby, so, you can pretty much make your own language! :D
https://github.com/pry/pry
  - next-level shell hackery



# why?
i prefer the syntax, expressiveness, clean 'n tidyness, and fun of ruby over python :)

its also a funny way to write very clean simple scripts in a more functional style

anyway, anything is better than bash!
-


basically, i just want to use Ruby for shell scripting, because bash is hella ugly, and i don't think zsh really fixes that due to compatibility with bash (posix). Fish is an interesting alternative, but, anyway, i think Ruby can be a cool general-use "scripting" langauge--basically glue for all sorts of every-day problems :)

# learn
# 1. learn x in y minutes
todo: get link


# 2. jump in

see the source code of Jekyll plugins
then see the source code of Jekyll


# useful links

https://www.ruby-lang.org/en/documentation/
  - main site, includes links to many now ancient classic tutorials, but it's better to just read Jekyll code, or something similar to what you want to do
  - **good from other langauge page**
  - **good ruby in 20 min page**
  - **how to use gems**: https://www.ruby-lang.org/en/libraries/
  - external links
    - tuts:
    - https://poignant.guide
      - comic-style, super adhd, but def special
    - https://pine.fm/LearnToProgram/
      - for complete noobs, just goes over the language, but good site style
    - http://rubykoans.com
      - good interactive exercise, but the content is boring, as it doesn't use any "standard libs" or external libs, or any *real use*
    - https://try.ruby-lang.org
      - contains many examples to quickly go through


https://en.m.wikibooks.org/wiki/Ruby_Programming
  - in addition to being a wikibook, it contains a lot of useful links




https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-exec
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-system
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-spawn
https://ruby-doc.org/core-3.1.1/IO.html

kernal
- kernal contains most keywords, and base object methods?
  - exec, replaces current process to execute something
  - eval, interpreter
  - system, runs in a "subshell" (another process?)
    - i think this is the one you'd often use for batch files
  - spawn, "similar to system but it doesn't wait for the command to finish"
    - "The parent process should use Process.wait to collect the termination status of its child or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes."
    - "has bunch of options to specify process attributes:"


# tutorials:

make sure you have a good set-up: vs code with ruby extensions, nvim with vim-ruby, or whatever, ad this it should be pretty easy to just get completion for everything for a "everything is an object" language

these three chapters look useful: otherwise, it's just the same ol' programming stuff... it's definitely much better to just jump into source code..

https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Executing_external_commands.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/File_processing.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Regular_expressions.html
  - https://github.com/learnbyexample/Ruby_Scripting

https://www.techotopia.com/index.php/Working_with_Files_in_Ruby



# commands
#!/usr/bin/env ruby
system('clear')
system('echo Hello $USER')



#!/usr/bin/env ruby

cmd1 = 'ls out.txt' # true if the file exists
cmd2 = 'grep "foo" out.txt' # false if none found
cmd3 = 'xyz' # nil because command not found

for cmd in [cmd1, cmd2, cmd3]
  puts "Command: #{cmd}"
  rv = system(cmd)

  # inspect method will display human readable representation of object
  puts "system return value: #{rv.inspect}"
  puts "Command exit status: #{$?.exitstatus}" # special var $? detils include PID/exit status/etc
  puts '-' * 30
end


# save stdout to a var
>> working_dir = `pwd`
=> "/home/learnbyexample/ruby_programs\n"
>> working_dir.chomp
=> "/home/learnbyexample/ruby_programs"

# use %x to use different delimeters, in case of character problems
>> nums = %x/seq 3/
=> "1\n2\n3\n"
>> puts nums # stdout
1
2
3
=> nil

>> foo = %x(echo `seq 2`).chomp
=> "1 2"

# only stdout is saved
>> files = %x{ls *.txt *.log}
ls: cannot access '*.log': No such file or directory
=> "out.txt\n"




irb command for repl



$ type env ruby
env is /usr/bin/env
ruby is /usr/local/bin/ruby

$ cat hello_world.rb
#!/usr/bin/env ruby

puts 'Hello World'

$ chmod +x hello_world.rb
$ ./hello_world.rb
Hello World



