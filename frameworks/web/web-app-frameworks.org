

* post-rust-conclusion (10/2024):

still phoenix (with it's default stack) or asp.net for all cases, from small to high-throughput/traffic to massive, and maybe even static. also, by the time you've got a product, live-view-native (for mobile) and blazor will be more developed..!

roda is still great when you want to make a tiny app from scratch, *a single file*, especially when you don't need anything from the beginning (no database / solely api programs, etc.). Very cool DIY feeling. Also, you get another reason to use ruby some more. :) But, you could probably build an empty phoenix project and have just about the same minimal setup.

rails is still great, easier to grasp than phoenix/elixir, but only if that's too overwhelming, or if you are used to using ruby, as phoenix fixes a lot of problems rails had. Also, rails can't compete with live-view. Also phoenix will get a type system soon!! So.. no. Just stick with elixir.
  - *NOTE: FAR FAR MORE JOBS STILL USE THIS*
    - *this is enough reason to learn/use it*
      - in addition to being able to use ruby some more :)
    - it's actually quite rare for any company to use phoenix.. they usually just use elixir for parts of that app that have high throughput (messaging, chat, etc.)

# x/haxe to avoid javascript and have static types (and good compiler errors!) and advanced language features
#   - html5 + haxe/http/node.js for the simplest gui apps (via html form tags)
#   - haxe-ui->anything + node.js for simple gui apps
#     - systems programming style! *NO HTML/JS!!*
#     - because haxe-ui can be used for any back-end, it could be used within any game engine (drawn via js canvas)!! or just html
#   - haxe + react bindings?
#     - maintained by rudy, but seems a mess.. just use js at this point..

special cases:
static site generators for simple static sites
  - just edit a simple config file and *voila!*, a web-site!
  - although, can still just use phoenix with Plug.static, and have complete control of the site
  - (TODO: see [static-site-generators]?)
    - *jekyll/ruby for the <3 of ruby*
  - TODO: emacs org-mode might have some decent site generators...
    - otherwise, can also use standard static site generator with .org files
tauri
  - a better electron: use an existing front-end, target cross-platform, works using the os's native browser
  - https://github.com/tauri-apps/tauri/issues/1270
    - elixir/phoenix and tauri integration (vs phoenix live-view-native)


to try:
CLOG for a fun way of making little web apps!

alts:
roda/ruby
  - for small web apps, *limited by GIL*
  - a smaller learning curve compared to elixir
    - especially if still using dragonruby!!
  - <3 ruby
x/haxe-ui
  - to avoid web front-end altogether
    - *UPDATE: but so can ruby via opal..*
    - and it's perfect for this..!
  - integrates with node.js (in the std lib!)
    - can piggyback on the most used server tech, without using js!!
  - *just about every game engine could be used*
    - *very cool web server / game stuff could be done!!*
      - use heaps or ceramic!
  - native web (html not canvas drawn) and native desktop!!
  - option to port to electron for desktop apps
    - use deepnight's electron-base as a template
  - <3 haxe
x/flutter (and some similarly implemented rust framework)
  - for a cross-platform all-in-one gui solution, particularly for *mobile devices*, (vs phoenix live-view-native)
  - see [app-frameworks]
  - also good for using a single language to do everything
    - flutter for simplicity, rust for incredible libs
  - *single-file web-sites!?!?*
  - still pretty experimental as of 2024
  - still better than it's alternatives in rust, C#, etc.






note:
web-assembly?
  - "Ideally you could use your given language of choice end-to-end via WASM as opposed to JS. Until one realizes how much of a PITA it is to transmit a whole GCâ€™ed runtime to clients (looking at you, Blazor WASM)."

thankfully, with web-assembly, can skip a decade of trash js frameworks, and just code nearly everything server-side with phoenix or some contemporary phoenix-live alternative.

ai is amazing for building skeletons/boiler-plate code, and just building enough so that you can jump into making, without copying/remembering various frameworks, languages, etc.



* conclusion:
"back-end" routing:

every langauge has a server, so really cuold choose anything, but more important is that it's in a language and framework that you'd want to use, and makes you happy... and stable

*ASP.NET*
  - familiar C#, compiled (therefore easy to debug!!), the best tools, front-end wasm potential (blazor)

*phoenix*
  - heavy traffic: parallel, etc.
  - a successor to ruby's back-end frameworks (rails), yet maintaining the simplicity of ruby's micro-frameworks (roda)
  
TODO: merge with above
  *phoenix*
  - rough learning curve
    - but if you don't know ruby, it's probably just as rough learning rails
  - particularly *phoenix live view*
    - specifically for dynamic apps that require a constant connection, basically replacing react
    - *phoenix live view native??*
      - https://github.com/liveview-native/live_view_native
        - currently v0.2.0
        - seems to be a very small team
        - core written in rust
    - stateful backend
    - live_svelte combines both
      - https://blog.sequinstream.com/liveview-is-best-with-svelte/
    - extremely stable
      - used by discord, telegram, whatsapp, pinterest, and countless others
  
*roda and other ruby micro-frameworks*
  - superceded by phoenix, however
  - *still great for simple, quick, personal, incremental-developing, low-traffic apps*
  - quicker to develop than elixir, as you're not forced into a functional-paradigm
    - also ruby is just more hackable.. it's a different way of developing, but not scalable unless very careful
  - for educational purposes: old school classic web app making in a minimalist style
  - https://www.reddit.com/r/ruby/comments/16j7r1w/web_frameworks_actively_maintained_in_2023/
    - list of web app frameworks currently maintained as of 2023
  - it's also still just nice to use a scripting language, making it simple to update pages 'n server-side stuff
    - and dragonruby!!
    
x/rails
  - superceded by phoenix
  - still great if you remember/use ruby, and still easier to learn and faster to use than writing elixir... but really should try to use phoenix first
  - for big stuff
  - magical (code is more mysterious, less explicit)
    


front-end:
*html/css/javascript*
  - until i figure out why the rest was made
  - note: phoenix automatically creates these for you..?
  
tailwind css
  - comes with phoenix apps by default
  - https://www.reddit.com/r/webdev/comments/15chth7/is_css_frameworks_like_tailwind_is_really_better/
  
other tools:
  - *figma*
    - design
  - storybook
    - an app to help make ui components



all-in-one-solutions:

*CLOG*
  - super interesting... worth trying..!

haxe (tink_web router/backend, bindings for all pop front-ends or haxe-ui-html5)
  - *haxe-ui seems great for small gui apps*
  - haxe-ui is a very very interesting alternative to flutter
    - *native web, natve desktop!* already better than flutter..!
  - haxe's back-end simply cannot compete with phoenix's backend concurrency
  - has front-end bindngs for a few js-frameworks, but not sure if that's a good idea..
  - https://community.haxe.org/t/haxe-seems-great-but-not-for-webdevelopment/3028
  
flutter
  - great for mobile and desktop, not so much for web
  - can use a single language for everything: dart
    - though can use any language for back-end..?
    - *for people that hate web dev (html/css/js)*
  - people seem to dislike the web target
    - https://www.reddit.com/r/FlutterDev/comments/180h020/why_is_flutter_not_as_popular_for_web_its_a_great/
      - uses canvas to draw ui, thus horrible for SEO
        - ...maybe updated to web assembly now..?
      - *"your app won't behave like a normal web app (eg: copy and paste, scrolling)"*
      - *"you can't use most of the available javascript libraries"*
      - https://www.reddit.com/r/FlutterDev/comments/180h020/comment/ka6t3jj/
        - a good comment here
  - combining with phoenix would be too complicated
    - https://elixirforum.com/t/regretting-questioning-my-current-stack-flutter-elixir-as-solo-dev-for-mobile-app/55731
  - google :(





sources:
  - TODO: check 'em out!
see https://web-frameworks-benchmark.netlify.app/result
  - a very good resources..
  - up-to-date benchmark as of 2024
  - caprese/nim, web/go, actix/rust, u(micro)websockets/js (written in C++, interfaced to js..?)...














* the frameworks:

red (language)
  - not really useful for web, just native gui
    - https://re-bol.com/rebol_quick_start.html#section-10

*CLOG*
  - *common lisp*
    - ...this is amazing..! lisp via web-sockets
    - lisp from the server interacts with an interface on the browser, which displays the gui and contains a javascript client to continue communication
      - similar to live-view
    - *possibly the most fun way to learn, practice, and use lisp..! very very practical for rapid development of little apps*
      - *NO HTML/JS/CSS* necessary
  - https://www.reddit.com/r/lisp/comments/ge27h3/where_to_go_to_learn_web_development_in_common/
    - start with hutchentoot (routing server), made a macro to input HTML into lisp, CLSQL, then go from there
    - parenscript to compile expressions to javascript
  - otherwise, lisp doesn't have many popular frameworks, instead, you must go the way of your own lisp ;)
    - radiance, caveman2, lucerne

haxe-ui
  - (see above in conclusion)
  - haxe-ui solely provides the gui, which'll work on a local browser or natively, but requires a http server
    - haxe's http lib seems updated, why not just use that..?
    - can use tink_http to abstract http client
  - haxe doesn't have a complete web framework, nor even a popular routing server...you either DIY or rely on targeting other languages' frameworks..?? particularly node, but possibly java (via jvm) and PHP (dropping support?) too
    - this makes it a very DIY, modular path, which is the ethos of haxe
  - can use haxe for front-end and back-end!!


*ASP.NET* (TODO: where did this entry go..??)
  - *web for systems devs*
    - thank goodness!
  - choice of either classic MVC, server-side rendering PWA, client-side wasm
  - *Razor components are shared across them all*
  - *Blazor via wasm (web assembly), has the potential to allow one to use C# for the front-end*
    - currently no hot-reloading
      - as you'd have to compile the front-end every-time too
    - as of 2024, still considered not for production
  - *Razor Pages, an interactive server-side rendering functionality similar to phoenix's live-view*

*elixir/phoenix*
  - UPDATE: will add gradual typing soon (like haxe, with a "dynamic" type)
  - along with ASP.NET, currently the best back-end solution
  - can use anything that compiles to BEAM bytecode!!
    - gleam for static-typed, functional lang
    - LFE for lisp
    - luerl for lua
  - classic strict MVC framework and file structure
    - which means hopping around several files (router, database table, html template, server-side functions)
    - but this it's also just how web works, *no bloat*
    - still quite compact
  - *good code generation for most boiler-plate crap*
  - though you can use any front-end solution, only uses tailwind-css by default
  - includes a template system (EEx), successor to ruby's ERB template system
  - has an additional learning curve for functional programming, but it's part of the solution to serve/handle a massive amount of requests
  - "Phoenix is great, it has integration with everything you would need for back-end web development. Using Ecto for database communication makes things very easy on that front. The web pages have pre-rendered HTML but then upgrade the connection to WebSockets, so you have the advantages of both server-side rendering and client-side web apps. Scaling is built in the Erlang VM."
  - "The way I look at it is Phoenix is equivalent or better to anywhere along the scale of a ruby project that is built directly on Rack -> Sinatra -> Rails. It is completely modular and you can strip it down to effectively just using plug (rack like low level) to piecemeal adding the bells and whistles (Sinatra -> Rails) to even more heavily extending it."
    - https://www.reddit.com/r/elixir/comments/d8r7ob/is_phoenix_to_elixir_as_rails_is_to_ruby/
      - very good comparison between ruby and elixir frameworks
      - Plug == Rack (routing), ecto == ROM (db), Phoenix == Roda (with RoR scaling) (a minimal complete web framework)
  - https://news.ycombinator.com/item?id=34530052
    - phoenix is a life-changing upgrade from older framework
  - can run on the tiniest, cheapest servers
    - light-weight processes run concurrently on the actor-model model, where each process is isolated, communicating by passing async messages
  - *phoenix liveview*
    - "Phoenix[ LiveView] is actually both. In short it handles things a bit differently. Each client gets a websocket connection to the server where the state lives, Phoenix adds some JS glue on the front-end so that when state on the server changes it streams a diff to the front-end that updates the state on the front-end. It's actually very very cool! Gives you a bunch of advantages."
     - livesvelte
        - small project
        - "These are the advantages as I see them. Please correct me if Iâ€™m wrong:
          - Have Svelte UI components that contain some decoupled state for performance purposes (for example sake tracking a userâ€™s cursor position).
          - Leverage existing UI components written in Svelte and JS.
          - Seamlessly push and pull data from said components w/o needing fetch requests or promises (all Svelte sees is a JS variable being reassigned).
          - Svelte components use hydration so thereâ€™s no coverage gaps in prerendering.
          - Arenâ€™t locked into writing Svelte exclusively. Can decide what to parts of the UI to render in LiveView, and what parts are more sensible with Svelte.
          - Probably worth tacking on that Svelte provides the best DX for JS, and runs very efficiently."
        - https://github.com/woutdp/live_svelte
  - *phoenix liveview-native*
    - re-use phoenix code to ship to native ui

*ruby on rails*
  - *the* classic web framework
  - *magical*
    - *very easy and quick to jump into as it's very opinionated, and as long as you just follow it's conventions, it'll do the rest for you*
    - this, combined with the magical beauty of ruby, really makes it feel really special, fine taste in design (especially when compared to .NET!)
  - "majestic monolith"
    - https://m.signalvnoise.com/the-majestic-monolith/
    - for a small team, this makes more sense than micro-service architecture
  - https://world.hey.com/dhh/the-one-person-framework-711e6318
    - rails 7 gets closer to being "the one person framework"
  - https://elixirforum.com/t/rails-and-phoenix-as-one-person-frameworks/44779/14
    - rails is the best solution for gettings to minimum viable product, but maintaining it sucks due to updates breaking code
  - a CPU hog and a memory hog
    - in ruby, each request is generally run on a seperate thread or process, thus eating up CPUs and memory
    - ruby's concurrency relies on/uses the OSs thread model, which can be heavy and cumbersome to use
  - ruby was intially built to be stateful, and later, they added things like turbo/stimulus/hotwire to make it more stateless, but it goes against it's natural design

*roda/ruby*
  - the classic micro-framework (successor of sinatra)
  - *completely modular* (plugins)
    - only the DSL for routing is provided, the rest is plug 'n play as you need
  - uses rack gem
    - a web server-web framework interface
      - supports all common servers, from nginx to AWS stuff
      - supports all common ruby frameworks, from roda to rails
  - the prettiest solution (see generated app.rb), no MVC pattern
    - incredible for tiny one-file apps!
    - *similar to dragonruby, you have complete freedom to design your own architecture*
  - even includes a *choice of templating system* (just as jekyll does): simplify writing html/js/css, and with your choice in style!
  - see this example: https://github.com/katleiahramos/Sinatra-Capsule-Wardrobe-App/tree/master
  - an upgrade from sinatra, making it more modular
    - "Roda was developed mostly to address common frustrations people had with sinatra. While I appreciate sinatra's seminal role in popularizing the "microframework" routing approach, which can still be felt outside of ruby, it really didn't do much to address that point where your barebones POC needs to be a bit more robust, at which point you'd have to rewrite everything from scratch in a new framework. Roda excels at that, by providing the vanilla "microframework" XP from the get go, while providing the more robust features as "opt in" plugins that you can pick up as you need."
 - "I use Roda in all of my applications. Itâ€™s solid and feature rich. Since itâ€™s a library for the routing layer, you will also need other libraries to build a full blown application. If you want high flexibility and want to define your own app architecture, then Roda can be a great library for solving the routing feature."
    
x/grape, hinami, cuba and other "opinionated" ruby frameworks
  - all fit somewhere between roda and rails
  - it seems better to just start with roda and make your own opinion..

flutter
  - see [app-frameworks]
  - web performance is it's greatest weakeness (it excels at rapid mobile dev)
  - very limited front-end compared to using js (limited to using it's component system)
  - *almost NO HTML/CSS/JS!!!*
  - compiles/transpiles to js (and now web assembly too!)
  - coming soon: *interop with js*
  - feels more systems programmingy (lots of ugly nesting), probably with better debugging too, and hot re-load for mobile
    - but debugging transpiled code may be a headache..
  - works really well with firebase (a database BaaS), for when you need simple database stuff
  - see excellent samples folder: https://github.com/flutter/samples
    - https://github.com/flutter/samples/tree/main/veggieseasons/lib
  - dart language directly competes with haxe, but has no other use/community, and feels meh
 
newer rust web frameworks
    - *i just don't see how any could even compete with BEAM/OTP, unless they re-write it, also, i much much prefer writing a beautiful functional language over rust!!*
  - several rust web frameworks (and cross-platform app frameworks that include web) are currently being developed, in high competion, and there will only be a few winners:
    - see [app-frameworks.txt] for app frameworks with a web target
    - *actix-web, axum, yew, leptos, sycamore*
    - https://www.reddit.com/r/rust/comments/18schae/best_rust_web_ui_framework_for_2024/
  - tokio
    - an async runtime, but the same community maintain a bunch of related web libs, including frameworks:
    - axum
      -  uses modular/composable component library system (tower)
        - makes writing middle-ware easier
    - warp
      - just the server, not an entire framework..
      - "fast, easy, light-weight, composable"
        - these are the traits i'm lookin' for! and with the unlimited power of it's modular framework if needed..
        - *very simple 'n clean functional api*
    - gotham
  - actix-web
    - uses actor model for concurrency
  - rocket
    - ??
    




a few current front-end frameworks:
NOTE: *DON'T NEED A FRONT-END FRAMEWORK, stick to plain css/js*, then modularly add tailwind css and alpine
  - https://elixirforum.com/t/thoughts-and-feeling-about-mixing-elm-with-phoenix/36647/5
    - "Elm (as well as React and nearly all other FE frameworks) manages its own application state and you absolutely should have a solid usecase that justifies introducing this complexity. The main reason one uses these frameworks is to provide a user experience where interactions feel instantanious. My feeling is that this is, in most cases, not enough to justify introducing what is essentially distributed computing."

*tailwind css*
  - simplifies css
  - can inline with the code
  - used by phoenix by default

*apline*
  - when you just need to add a little interactivity, can try this
  - works well with phoenix, but now with live-view.js, no need
  
*svelte*
  - the current hot react-like contemporary js framework
  -simple and sensible front-end framework ("components")
    - and therefore brings the complexity of those frameworks too..
  - awesome home page with interactive examples to get the gist of it
  - *makes html/js/css object-oriented so it doesn't feel like an unorganized mess* (scoped)
  - kinda comes with a template-like system built-in, in which you can inject js anywhere in the html, like php
    - <? inject code here> -> { inject.jsfunction() }
  - *sveltekit (svelte + vite)*
    - for really rapid dev..
  - "Closest to vue but doesn't have a runtime", just *pure html/js*
  
elm (language and framework)
  - brings a functional language runtime to js, outputting pure js
    - even with that, it's still the same size as other js frameworks
  - still brings the complexity of any stateful front-end architecture (react)
  - no websocket support..?
  - *not able to call javascript libs..?*
  - a few people has pretty bad experiences with it's community compared to other small langs..
  - in history will be known for it's architectural concepts
  
purescript (langauge)
  - subset of haskell that transpiles to javascript
    
marko
  - a better, smaller react?
  - runs and maintained by eBay







** history / not interested:

*** back-end:
ruby/sinatra
  - replaced by roda
  - made "micro-frameworks" popular (python/flask, js/express, etc.)

*** front-end/js:
  - "only concerned with the user interface and rendering components to the DOM"
  
angular
  - "Great if you want an opinionated framework with a lot of tools provided out of the box"
  
vue
  - alt to react
    
react
  - ""Unopinionated view library. You'll need bring your own tooling."
  - for big stuff
  - paved way for state-based web app design
  - react native
    - direct competition with flutter
  - facebook
    - maybe the worst of the giant tech companies..??
    
PHP
  - laravel
    - 2011
    - based on symphony
      - 2005







* just some notes:
https://elixirforum.com/t/rails-and-phoenix-as-one-person-frameworks/44779/4
(my post!)
Overall, I agree with DHH, that we have seen a huge ramp-up in complexity in the last decade when it comes to web development. Much of it was necessary and caused by improvements in standards and practices around security, privacy, user experiences, etc.

However, some of this complexity was brought by moving the logic to the client, which naturally creates a split between client and server. The movement started with Phoenix+LiveView shows the server is equally capable of powering rich and interactive user experiences. And now, with esbuild, sass, and tailwind-standalone, we can get rid of npm and limit JavaScript to the front-end only, as it was 10 years ago.

https://www.reddit.com/r/elixir/comments/zd9o07/comparing_phoenix_to_rails_in_december_2022/
I've been a rubyist for over 10 years. Elixir for about 4. I will always love ruby for what it is. My 2 cents

Ruby has considerably more libraries and this is IMO at this point the only reason, other than being mandated or wanting to write ruby, that I would still use it over Elixir.

The edge for everything else IMO goes to Elixir.

The big highlights are

concurrency

FP scope > OO scopes

liveview and live dashboard are ðŸ”¥ðŸ¤˜

contexts > models

response times are in the micro vs milli seconds

Phoenix saw webpacker for the ðŸ’© it was and quick pivoted to a sane alternative in esbuild, Rails might have it all sorted out with Propshaft but right now it's an absolute dumpster fire if you're upgrading a older rails app, i.e. asset pipeline -> webpacker or asset pipeline or import maps -> propshaft?

benchmarking

testing & code analysis (credo, dialyzer)

immutability

ex doc is insanely easier to use vs rdoc et al

runs on significantly fewer resources

OTP

hex is better than bundler

deployment (releases)

cross platform (ruby has come a long way on windows from what it was but...)

stable API vs the OCD of ruby/rails

multi core (no GIL in ELixir)


https://elixirforum.com/t/regretting-questioning-my-current-stack-flutter-elixir-as-solo-dev-for-mobile-app/55731/36
  - lots of great info about contemporary web app making

https://www.reddit.com/r/FlutterDev/comments/nihq35/noob_question_is_flutter_alone_enough_to_make/

https://news.ycombinator.com/item?id=32530203
  - phoenix is minimal yet can scale better than RoR

https://www.reddit.com/r/ruby/comments/ecg2q2/which_ruby_web_framework_to_use_these_days/
  - Why is it you want to use a framework? If you just need a way to interact via HTTP you might want to look into rack. Want routing as well? Might as well start out with roda. Need more features and ease of use? Check out sinatra. Want to learn about a battle-tested, full featured framework? Look into rails.

roda > sinatra
  - https://www.reddit.com/r/ruby/comments/x0iyg1/sinatra_vs_roda_whats_your_take/

https://www.reddit.com/r/elixir/comments/12b4nuv/livesvelte_render_svelte_directly_into_phoenix/
  - livesvelte

