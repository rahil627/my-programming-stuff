heya.

i'm at a point in life where i'm coming back to America, specifically California, for the sole purpose of doing career-related work. I recently finished my trip exploring the coast of Cali by scooter(!!) and now am at the end in San Diego while i ponder upon some mid-life career directions..

i've been out of the tech world for some time, but recently, during my off-time while working at UC Berkeley (not tech-related), with just an old chromebook at hand, i discovered some newfound joy in computers again while searching for tools to make making games, gui apps, 'n web apps more enjoyable (and i found them!: dragonruby/mruby, haxeui/haxe, phoenix/elixir). The journey led me through a history of programming languages, linux, unix/terminals/shells, text editors, all the way back to the beginning with lisp/emacs 'n smalltalk'! It was a fun blast through the past. So now i'm trying to transition away from sheer software dev into more generalist support  jobs like systems admin, data visualization, and most fittingly, product design.

though i've become holed into software dev work professionally, it's the new concepts that drive me. Putting new products into the world, in order to change the world. I'm a concept-making machine, from philosophy to apps to funky controller inputs for games, to interactive art installations. The first part is the most satisfying: to make a prototype with minimalist design as proof-of-concept. The design comes naturally. Then, finally, comes the software engineering, in order to finish the product. It's the long-term software engineering that has always killed my energy, leading me on a long quest towards finding 'n designing better engineering tools: programming languages, game engines/frameworks, etc. As a solo maker, i greatly value happiness. Thus i admire nicolas cannasse (haxe/dune game) and jon blow (jai/braid), whom both made a programming langauge, a game engine, various modular tools to help make games, and several games, mostly by themselves. Similar to them, i end up going down the first principles route too, desiring to make everything from scratch. But unlike them, however, i wouldn't spend a decade of my life doing it. Life is short. I'd rather make the products, not the tools!

beyond the inital few pro tech jobs i did (.net dev and ETL, qa & release engi), most of my design 'n tech experience came from my passion for making games, including video games: a 4 player arcade style sports game, a multi-device iOS party game, various game installations, several game prototypes (a touch tracing carnival game for ipad, HORSE for ipad..) [with various game engines: cocos2d -> flashpunk with adobe air -> haxepunk/haxe -> dragonruby]. I loved thinking of new games using the ipad as a new medium, with its 10+ touch inputs. That was back when the ipad was still new. To this day, i still prefer using the ipad mini. I also was into making new input and output devices, leading to more funky physical game experiences. I nearly did a master's at parsons for design and tech for such directions..

anyway, as making games only requires pure systems programming, i honestly lack the contemporary large-scale web app pro work experience to compete in today's software job market, especially in the SF Bay Area: countless js frameworks, cloud computing / container orchestration, language modelling, software for massive scale. Upon seeing these design jobs, i realized, i must go back to my design roots asap, and forget about software engineering jobs. I'm a designer first, engineering was just the means. I simply do whatever it takes to make a product reality, nothing more.

I'm a big picture person. Practical. Nomadic. Constantly in flux, travelling the world, living in various ways, designing ways to live, from rural/indigenous Taiwan to coastal Cali and soon to indigenous Mexico. I go from understanding cultures and nature to understanding the details of programming languages, and back. It's wild, but it's good for design, as i approach technology like a different caveman every few months.

i personally have avoided using all of apple's productivity apps because for a long time they sucked, but also, because i prefer simplicity: plain written languages on plain text files. Notes was by far the most useless app. Now that i use emacs, i will soon use org-mode for note-keeping, a 20 year old knowledge-base solution. Yes, that is how bad contemporary apps are! For the longest time, i used Voice Dream for reading and writing on an ipad mini 2 (i used ByWord before that). It's amazing how every other app failed to be as simple as that one. Now looking at the apple apps, they've all come a long way, and it would be fun to rediscover them, critique them, listen to users, add features, and re-design them, over and over, 'til perfection!  And freeform would absolutely be a dream to develop, as a person that loves touch input / ipads. :)

i'm quite into the human interface, of getting an idea down immediately, to the point of just using audio recordings to spill out one's mind. I'm naturally very picky about this stuff, as i feel the expressions of people should not be hindered, but flow without thinking about the interface. From drawing to writing to video, in whatever way a thought can be conveyed. Just recently i went through a string of programming text editors, ending with helix, zed, focus, and emacs (with meow-mode). And it's surprising that none of them had thought about the nuances of the design of a keyboard-oriented editor as focus editor did. A simple text editor made by a single game developer during their spare time. If app devs treated their designs as game devs did, where the user doesn't know anything about the game at the beginning, maybe there would be some decent learning curves! Most interestingly, despite all these apps, i still prefer paper and pencil over any digital app! I'll def have to give the OCR in freeform a whirl..

to me, there's always so much potential in touch input apps, thanks to gestures, multi-touch, and the pencil. With so much input possibilities, it becomes an endless well of productivity to be had. Yet, no one ever takes the time for nuances in design.. anyway:

my nature prefers the chaos of talking and supporting everyone in a community, whilst doing several tasks on several projects on my own, learning and doing a bit of everything. I think i'd be satisfied working at a small media production crew where it's very DIY and where everyone does everything, but for big institutions like this, perhaps i can figure out what specializations i'd enjoy. I hope that i can share some knowledge 'n wisdom with the rest of the folks at apple, and see the day-to-day life of software specialists: infrastructure, data visualization, qa. I'd be down for supporting the design of as many projects as i can(!), in addition to designing new products.

SF was the first place i moved to when i had the chance. When i came back to America, i experienced such an inhumane and draining time helping the homeless/drugged there, that i tried living and working at (UC) Berkeley instead. Despite all my time in SF and Berkeley, i never explored the south bay, which is apparently where the most Taiwanese people live! Maybe it's finally time to go to my imagined dystopia i've always avoided: silicon valley.

anyway, just e-mail me, as i may be in southern Mexico soon, where my phone may not work.

ra
