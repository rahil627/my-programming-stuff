heya.

i'm at a point in life where i'm coming back to America, specifically California, for the sole purpose of doing career-related work. I recently finished my trip exploring the coast of Cali by scooter(!!) and now am at the end in San Diego while i ponder upon some mid-life career directions..

i've been out of the tech world for some time, but recently, during my off-time while working at UC Berkeley (not tech-related), with just an old chromebook at hand, i discovered some newfound joy in computers again while searching for tools to make making games, gui apps, 'n web apps more enjoyable (and i found them!: dragonruby/mruby--truly a gem--, haxeui/heaps/haxe, phoenix/elixir, ruby). The journey led me through a history of programming languages, linux, unix/terminals/shells, text editors, all the way back to the beginning with lisp/emacs 'n smalltalk'! It was a fun blast through the past. So now i'm trying to transition away from sheer software dev into more generalist support jobs like systems admin, data visualization, and most fittingly, product design.

though i've become holed into software dev work professionally, it's the new concepts that drive me. Putting new products into the world, in order to change the world. I'm a concept-making machine, from philosophy to apps to funky controller inputs for games, to interactive art installations. The first part is the most satisfying: to make a prototype with minimalist design as proof-of-concept. The design comes naturally. Then, finally, comes the software engineering, in order to finish the product. It's the long-term software engineering that has always killed my energy, leading me on a long quest towards finding 'n designing better engineering tools: programming languages, game engines/frameworks, etc. As a solo maker, i greatly value happiness. As somebody who hopes to make games and apps throughout my lifetime, the quality of these tools very important, to me and others. Thus i admire nicolas cannasse (of haxe/heaps/dune fame) and jon blow (of jai/untitled-game-engine/braid/witness fame), whom both made a programming langauge, a game engine, various modular tools to help make games, and several games, mostly by themselves. Similar to them, i end up going down the first principles route too, desiring to make everything from scratch. But unlike them, however, i wouldn't spend a decade of my life doing it. Life is short. I'd rather make the products, not the entire tool-kit!

BUT this is the one tool that really does need to be entirely re-thought about, and though it can't be re-made from scratch, it sure feel like it should be. One of the reasons i stopped making games was because the experience of using objective-c and xcode was the most terrible developer/making expereince i've ever had in life--and i've gone through many game engines! I've heard there were some updates, but my god, i can't think of another tool that's so important, yet that's so garbage. I still recall how it would crash, like windows ME, but in the 2010s. Surely it's an engineering nightmare beneath it. But forcing devs to use a terrible IDE, a terrible language (and i dream of a smalltalk game engine; thank goodness for swift though), on top of handling ARC, slow device simulations, iOS libs, etc... yikes. Needless to say, though Macbook survives to this day, i'm much happier to use windows on it (still love my iPad though). To me, the developer experience is the reason i stopped making iPad games, and never made any iPad apps. I believe it is the same to many others. What a lost opportunity to those with great passions to make great apps!

anyway, as making games only requires pure systems programming, i honestly lack the contemporary large-scale web app pro work experience to compete in today's software job market. Upon seeing these design jobs, i realized i must go back to my design roots asap, and forget about software engineering jobs. I'm a designer first, engineering was just the means. I simply do whatever it takes to make a product reality, nothing more.

i'm quite into the human interface, of getting an idea down immediately, to the point of just using audio recordings to spill out one's mind. I'm naturally very picky about this stuff, as i feel the expressions of people should not be hindered, but flow without thinking about the interface. The same applies to making software: especially games, but general programming too. Just recently i went through a string of programming text editors, ending with helix, zed, focus, and emacs (doom-emacs with meow-mode). And it's surprising that none of them had thought about the nuances of the design of a keyboard-oriented editor as focus editor did (maybe limited by the terminal..). A simple text editor made by a single game developer during their spare time. If app devs treated their designs as game devs did, where the user doesn't know anything about the game at the beginning, maybe there would be some decent learning curves! Surprisingly, i'm writing this in emacs, simply because emacs, like focus editor, does the work for me, what i expect (though it suffers in endless customization). I don't have to remember and press 10 keys to do one thing. And i think xcode (and apple in general) takes this approach too, of design first, but somewhere along it's long development it must have become an unmaintainable mess.

thus, i honestly think that a designer isn't the most neeeded solution to this problem (though one can still help! :)). I think several programmers are needed to re-haul the entire mess! I know it ain't easy, and probably why Google delegated the task to JetBrains, but my goodness, it's so necessary. It's to the point that most devs probably just use vscode for swift, lol. It's an epic task, but worth it if one can bring it closer to the zen flow of making. Not just programming, but making an entire digital product.

i mean, when the terminal via third-party Termius (nearly zero touch interaction) and vs-code web are the best iOS dev tools, surely something is deeply wrong here..

anyway..

my nature prefers the chaos of talking and supporting everyone in a community, whilst doing several tasks on several projects on my own, learning and doing a bit of everything. I think i'd be satisfied working at a small media production crew where it's very DIY and where everyone does everything, but for big institutions like this, perhaps i can find my bearings within in and oil the machine. I hope that i can share some knowledge 'n wisdom with the rest of the folks at apple, and see firsthand the day-to-day life of software specialists: infrastructure, data visualization, qa. I'd be down for supporting the design of as many projects as i can(!), in addition to thinking about new products. I think all products suck, so there's always something to do. ;)

SF was the first place i moved to when i had the chance. When i came back to America, i experienced such an inhumane and draining time helping the homeless/drugged there, that i tried living and working at (UC) Berkeley instead. Turned out, those kids are drained too! Despite all my time in SF and Berkeley, i never explored the south bay, which is apparently where the most Taiwanese people live! Maybe it's finally time to try living in my imagined dystopia: silicon valley. Maybe it's not so bad.

in order to contact me, just e-mail me. This number may work: 415-535-8416.

fix the developer tools and experience, then maybe people that dream of great iOS/Mac apps could actually realize them! As for me, i'm sticking to web apps via phoenix/elixir, which is crazy as a person that hates web dev!

ra
