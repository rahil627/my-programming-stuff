

heya,

i was just travelling down the coast of Cali via motorcycle, and while exploring LA, i found out that Caltech and Art Center are located in a pretty neat area--northeast LA--, and even close to Asian communities: a solid place to experience the LA/SoCal vibe!

this job seems pretty fitting to me. I have a community maintanence sort of a personality, naturally making a home, taking care of the home (and the people in it), helping others on their projects, improving 'n making designs, making tools, 'n so on. This job similarly seems very general, involves taking care of others' projects, is quite autonomous, and thankfully seems to be just straight systems programming (no web, save via jupyter). It's the maintenance of digital home.

the projects seem pretty straight-forward and plentiful. When i was young, i was more into the arts/humanities side via making/curating/exhibiting interactive game installations about human experiences, exhibiting them in any way possible with Babycastles in NYC. Games were my first consumed medium, and later, my first art. It would be cool to bring that sort of game design sense into some of these projects. Of course i'd absolutely focus on essentials first, but naturally, while making stuff, i think it would lead to making some neat, modular, general tools to be used across several science projects. In my eyes, most of the projects are simple games, just with massive input and output, so it doesn't seem too scary... For example, i really dig tools like "ldtk", a modular level designer tool-kit (via electron and haxe->js), and "hide", a modular game ide (via vdom and haxe->js).

projects like "making WISER wiser" is possibly the most standard job to me, as it's simply a gui app with some input and visual output. The gui problem, as i've recently looked into, still exists as of today. Web (+ electron + that rust electron) seems to be the current gui solution. Cross-platform solutions are cumbersome or plain ancient. Game-devs simply use immediate gui. I'd wonder if a julia/python wrapper for imgui would work better for most of these sort of apps. Surely that'd be simpler than messing with gtk/qt/wxWidgets object-oriented bindings, and capable of more flexible ui components too! And it seems for many of these apps, you probably don't even need to draw most of it at 60fps, so it won't burn those lab GPUs too badly.. Heck, i'd even check if RED langauge (gui built in) is decent now, which would be totally awesome for non-software folks. :) I'm surprised there's no smalltalk solution for science folks!

my niche interests when i was young were in using sensors, making alt controls, using different outputs in order to make physical games, or modify existing indie video games into more physical, playful experiences. I honestly don't have the personality best fit for software programming: i'm more of a conceptual person, a big picture person that gets down 'n dirty for the purpose of getting something i want done, for example, running a permaculture community and actually doing the farm-work and cooking; but i do like the idea of having these very specific, straight-forward projects to just crank out, maintain, simplify, modularize, and perhaps, design better ui for.. though, i could be day-dreaming ideals..

i think i'd get along with those researchers that write giant single file programs or "notebooks" because they're so focused on doing precisely the things they need. To me, as long as it solves the problem, and especially that problem only, thats great code. :) Rust devs scare me. I think small game developers share this way of thinking: a disdain for all the crap the gets in the way: big game engines, version control (git!!), over-engineering early with software patterns, etc. I just can't imagine research programs being too big or messy, or even too un-optimized... i'd wonder if they too end up creating similar entity-systems..

anyway, i just really like how general the job is. I'm a generalist. If i liked linux, i'd probably opt for the devops route, but i dig these gamey apps more as they involve more sheer general programming and less unix glue 'n specialized software.

on to the bad part: i lack experience in many, many contempoary computer areas: cloud computing (service and private), virtualization, concurrent and parallel computing (beyond loading crap and path-finding calculations, simple games don't need 'em), machine-learning, scientific-computing, etc. I certainly don't mind getting dirty in some of these areas 'n related software; it's just that i personally never needed any of them, and even avoided complexity. To me, hardware has always been powerful, it's just the software sucks. Hopefully it's better in the research world.. Furthermore, it's been a long long time since i've used the math side of my brain, as i haven't used much since college (save primitive 2d geometry and some linear algebra, again, for games). And lastly, it's even been quite some time i've used python (again, college), and i've never used go. I guess my tastes have always differed from Google's stuff..

recently, i got pretty deep into programming languages, text editors, and just the general workflow for making stuff, finally spending some time to choose my own tool-set in order to make making stuff more enjoyable, whenever the urge comes. My language choices are pretty esoteric: haxe, elixir (i'd wonder if jupyter notebooks even has a distributed computing solution like elixir's livebook..), and dragonruby (a mruby fork) until jai comes out (and emacs-lisp, lol). What a mess. Yep, i've gotten into some wild rabbit holes recently.. So, unfortunately, it's also been a long time since i've used [memory] pointers via C/C++ (also not since college), as rust just sounds like it would make making games even more painful than it already is.., so, i'll def need a refresher to get back into allocating memory too. But, as i'm quite interested in the make-games-from-scratch route, i'm down for writing stupid simple straight-forward optimized bits of programs in C or C-like languages when necessary, writing closer to the hardware architecture, being concious of cache misses, sending things to the GPU in one go, etc., as it's all skills shared with game-making. Otherwise, if it's just Julia with garbage collection, i think i'll be fine.

phew, didn't mean to write so much..

anyway, i honestly can't stand LA's complete lack of urban planning, so i'm going to continue riding my scooter south to San Diego to complete the coastal trip, then, perhaps, back up to SLO or Santa Cruz, as i'm a bikeable nature-side village country-bumpkin. :) Feel free to e-mail me anytime. And sorry in advance if i don't see it!

<3 ra
