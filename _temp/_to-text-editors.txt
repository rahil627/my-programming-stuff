https://www.reddit.com/r/emacs/comments/1i2hi0t/your_reason_to_switch_to_emacs_or_was_it_your/

initially: dreamweaver? lol -> code blocks (C++) + notepad++ + notepad2 - > vs studio (C#) + komodo edit (python) (-> sublime text)

then at one moment in my life, i began learning linux through a terminal on an old iPad mini 2 via termius while living abroad in an isolated rural place. This is where I tried and learned vi/vim and linux, through iSH (apline linux on iOS). Though I digged the keyboard-based key-bindings idea and the idea of editing things through a terminal, making me feel like a hacker ;), I hated the config process of nvim, vim script, and a mess of out-dated auto-complete plugins and info I went through (deoplete, CoC..?). Soon after that, the lua version came out, with a native lsp thing.. but it was too late. I took a trip through text editors.

I immediately found and loved helix, for it's key-bindings (kakoune-style interactivity) and pop-up menus, and it's default config was great and just worked. It was the clean, batteries-included, rust-made terminal text editor that I was looking for, without all the baggage, hand-crafted by those fine rustaceans, and with hopes of a future with scheme scripting, which i was really interested in, as i had missed emacs but wanted to try lisp (though i'm uncertain if one can edit any part of the program..).

however, iirc, around that same time, i tried doom-emacs once. I once met a wizard at a hacker-space who tipped me toward starting with doom, as i wasn't sure which config to start with. That first experience left a very surprisingly good impression on me, particularly to how intuitive it was, against all the complexities i heard about it, thanks to it's pop-up menus, and with the help of me knowing vim. It was refreshing to combine the file manager, text editor, and shell, all using vim-key-bindings. I also noticed emacs just did things that made sense, whereas vim and even helix, don't. There was fine details, and code behind it. I also liked the idea of key-chords over key-bindings. It felt good and more easy to remember. ..And so i felt helix took the pop-up menus from emacs, and that perhaps there's more to it.. why use helix when i could just use the real thing..?

i still went back to helix, as i felt i could still use it for text editing purposes in the future, even if i use emacs in the future. I mastered it, made my own config, key-bindings, and even a beautiful theme: https://github.com/helix-editor/helix/pull/11791 . And though the default key-bindings are great, i had to spend quite a bit of time even configing that to my likings: https://github.com/rahil627/my-programming-stuff/blob/main/configs/windows/helix/config.toml . I felt like i was running out of modifier keys!!

however, i eventually re-visited doom, partly because i was interested in org-mode, writing functions (helix only had "keyboard macros" at the time), and lisp. I was particularly interested in the moew-bindings, in combination with doom-emacs: doom-meow. Meow-mode turned out to be even more sensible than helix's keybindings: more general/conceptual, more minimal, making great use of the pop-up menus. It got rid of useless keys and combined it where it could. In addition, i'm told it better retains the idiomatic emacs key-bindings than evil, so it seems i still have the original m-x menu (i think..), in addition to all the empty bindings provided by the spc menu. It's perfect for me. Yet, it's the nuances of doom and meow that make it a clear winner. It's years of nuances that build over time, that somehow agreed upon, and merged into the code. In comparison, vim/helix are dumb, i'd have to press a bunch more keys, write key-board macros and functions to accomplish the same thing, whereas with emacs, it already has the intuitive code to just do the common-sensical thing.

my editors are now: doom-emacs with meow, focus editor (a minimalist gem, with a great attention to design and nuances; written in jai), zed (zero config), vs-code (extensions just work), and helix (for quickly editing on servers, where i don't want to install doom).

Kakoune is actually the ideal editor for unix/DIY/modular lovers, extending it via external programs/scripts (not just piping text, which helix also brought over), but i've come to terms to give up unix for emacs as soon as i opened eshell (--I even prefer windows and powershell over linux.. i prefer batteries-included/zero-config to modular/DIY..). Sublime, which I missed out on, was actually sublime, especially as it's written in C/C++ and python for extensions, but the ruby-lsp wasn't working, and probably just took a hit from jetbrain's rubymine and vs-code. Lem also sounded quite ideal, written entirely in common-lisp, which makes it hackable down to the core, in a langauge i'm eager to learn, but unfortunately it was buggy, and just wouldn't have the packages i want from emacs (though a fun way to learn common lisp..). And anyway, emacs now compiles to native code.., so i just don't see much benefits of even these rather lofty, idealistic editors over emacs..

now i'm just content. Now there's no need to maintain configs for a terminal emulator (and tmux, if not combined) whose key-bindings must be carefully selected as not to interfere with the terminal text editor, adding more to cognitive load. Heck, i don't even need terminal linux anymore: no need for fzf, lf, gh, and a bunch more cli tools (though ripgrep, fd, and some other tools are used). Instead of configuring the shell, which also felt cryptic and old (bash, fish), Doom-emacs is the only thing i need to config. And to this day, i still haven't touched the config file (just un/commented settings)!! That, is true happiness. I'm still just learning, and thus far meow's key-bindings, both for it's main text editing key-bindings and menu key-bindings, have been good enough for me. It was a long journey, but i found it: doom-meow.

Next off: alt key-board layouts, which meow supports!