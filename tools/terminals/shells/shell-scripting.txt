
also see the 'scripting languages' section in 'programming lanugages.txt' for notes on


https://kddnewton.com/2016/10/11/exploring-cli-best-practices.html
  - some cli best practices
  - and a gem to neatly add callbacks (to anything), to use with rails




practice:
https://learnbyexample.github.io/books/
  - ruby one-liners cookbook
  - ruby regex
  - grep/ripgrep, sed, awk


tui frameworks:
bubbletea
  - a powerful little tui framework
  - has a bunch of component libs (bubble, etc.)
gum
  - built on top of bubble and lip gloss



how to make a script:
https://linuxhandbook.com/run-shell-script/

add shebang to the top of the script:
#! /bin/bash

make it executable:
chmod u+x hello.sh

add the path:
(see below)



where to store scripts?:
anywhere, just add to PATH
  - this way, you can just keep your scripts in a github repo!

bash
  - export PATH=$PATH:/home/user/scripts
fish
  - set -gx PATH $PATH /path/to/scripts
  - fish_add_path /path/to/scripts


note: once the PATH is set, you can then easily add aliases:
alias do do-something.sh
alias dr do-something.rb



default user binaries location:
typically `.local/bin`

as long as the distro is using systemd:

(The ~/.local directories are part of the systemd file-hierarchy spec and is an extension of the xdg user-dirs spec)

run `systemd-path user-binaries`



https://unix.stackexchange.com/questions/316765/which-distributions-have-home-local-bin-in-path







(copied to the readme.txt in the scripts folder)
a little short history:

when i got back to computering, after a decade without computering, i got into *making* stuff, including little scripts / programs to do stuff. Because when i got back i started with a Linux command terminal, i started with Bash commands to do everything.

Bash was/is a rather painful experience. Whereas some commands are great: grep, find, etc. (i'm still not at awk level..), in general, i felt the Bash terminal as a mess of non-standard cli application, each of which has their own strange flags, and each doing it's thing in it's own way, often unintuitive.

the idea is great: if you learn the commands, you can then use that same knowledge to write scripts! Yay. But as it turns out, you probably don't want to be writing sripts in Bash. **Running a set of commands is fine**, and with the slew of cli apps, that's really all you need to do. But actually writing Bash scripts as you would a program, i just don't feel this is good... todo: but, maybe first i'll try giving bash a proper try...

anyway, i think it would be better to just write stuff in a pop "scripting language", such as Ruby, Python, or Haxe--Haxe has the doubly usefulness in that it's also a system language, that can be compiled to be very fast (And anyway, i like Haxe, and hope to use it for the Heaps game engine some more! :) ). Instead of learning all of these commands, command-line-apps, and building up yourself a set of "dotfiles", so that you can make your life more comfortable, i feel it's better to just use the "standard library" that is provided by those programming languages. That way, you learn the standard library, which is more or less the same for every language (file i/o, std i/o, serialization, network, etc.), so then, you're better suited for writing programs. Whereas with using the world of cli apps, terminals, shell scripts, etc., you'd merely be learning how to use other cli apps, combining them, using them as service, dev-ops sort of stuff. To some extent, they are needed, and they can be awesome. but, many times now, i just feel that instead figuring which cli app to use, xargs, etc., i could have simply wrote a simple program to do it!

and so, this scripts folder. Likely, i will use Haxe, but since i currently use Jekyll for my web-sites (maybe will move to a simpler Haxe SSG), there will be some Ruby too (mods/hacks, a parser for my personal mark-up language, plugins), and who knows, maybe i'll give python another try too, as it seems so loved. But really, i'd prefer to just stick to two languages: Haxe and C#. Haxe for the quick scripts and games (Heaps) and C# for the big cross-platform games (Unity, MonoGame) 'n apps (Avalonia). Python and Ruby cannot serve those needs (a game engine would be too slow).
