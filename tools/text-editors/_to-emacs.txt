TODO: what happened? migrated to emacs.org..?


from a temp emacs file, while using terminal emacs on a linux container via chromebook

BEWARE: WATCH OUT FOR THE DANGERS OF EMACS
USE FOCUS EDITOR INSTEAD
  - also, take a break, skim through some programming classics
    - land of lisp, little schemer, K&R, structure and interpretation of compilers

some gems:
  - https://news.ycombinator.com/item?id=6094610
    - matz made a powerpoint on emacs?? gotta love him!
	 - 1988
    - emacs made me realize anything can be changed by a programmer, it is total freedom
	 - i could edit without thinking key-binding
	 - i wrote my own email client, in emacs lisp. it was my first non-trivial lisp program. i used it everyday.
	 - 1993
	   - started ruby
		  - from emacs, it uses integers as pointers, mark and sweep gc, similar object model, then a smalltalk-like oo system on top. For syntax, i wanted a algol/ada/eiffel-like one.
		  - but as an emacs-addict, i needed a langauge mode... if i couldn't make ruby-mode to work, the syntax of ruby would've changed

pale night > tokyo night

note: in god-mode/meow, c-x -> spc-x

c-h b m
  - which key menu


c-x
  - main menu, emacs

c-m
  - text editing menu..??

c-c (or just space)
  - same as pressing space in god-mode/meow

c-v
  - major mode menu



mru:
command+click
  - pop-up buffer menu, categorized!! WTF!?

c-x B > b
  - the other buffer menu is cool, interactive, but no previews
c-x K > k
  - i've never used k-macro..yet?

c-x f f
c-x f F
  - find file

c-x d
  - dired
    - can also arrive here via find file by selecting a directory
    - use m to mark, then another key for an action
c-x D
  - delete this file! never have to leave emacs! :D

m-m x cd
  - change working dir
    - useful to limit for find file

c-w
  - workspaces
    - TODO: or use project, not workspace..?
	 - nice! simple 'n quick. unlike a wezterm/tmux + terminal text editor set-up, you don't have maintain separate configs 'n key-bindings! all you need is emacs~~
  - w
    - select
	   - handles/no need for the following key-bindings:
	   - c, n, p, 1..9
        - create, next, prev
  - l
    - load
	   - NOTE: can find several autosaves here, just in case..!



c-x 3
  - not a fan of this.. 3 feels cryptic, like bash


  This is done cleverly, too. The first key you press after SPC becomes the modifier that is applied to every key following it. So C-x C-f becomes <SPC> x f, and C-c C-v C-t still becomes <SPC> c v t. To escape modification, you press SPC again. Critically, you can omit the SPC if the key you press matches exactly one non-modified key and no modified-keys.
