
# looking for:
sane defaults
  - don't want to waste time configing all day, need to focus!
inuititive learning experience
  - quick to re-learn and jump deep into again
a good non-modal experience
  - if modal, a useful insert mode
not slow / heavy
  - focus editor has spoiled me..
  - i guess terminal-based is fine..
    - it's more the ram/cpu hogging i don't like
    - but also focus editor is just really, really fast
a simple way to write extensions
  - preferably in lisp, or lispy
unrestrictive
  - see the "four pillars" below
  
  - tests:
    - focus
      - excels greatly at the first four

https://www.reddit.com/r/emacs/comments/124eyh6/things_your_editor_should_have_with_amir_rajan/
  - four pillars:
    - 1. can see the function when you press a button
    - 2. can set a key to a series of functions: a macro
    - 3. **can create your own function**
      - the most important
    - 4. can see the source code
    additional pillars:
    - 5. written in lisp or smalltalk or a similarly powerful interactive dev runtime

  - tests:
    - vscode
      - no? (maybe there's an extension..?), probably, **yes, but not simple** (have to write an extension), sure (but hella complex), no
    - helix
      - no (can request 'n discuss), yes, **not yet (but even then, limited to the api/interface provided to the scripting lang)**, yes, sorta (limited to api)
    - **lem**
      - likely, sure, **yes!**, yes, yes
    - **emacs**
      - of course yes to all, though you probably wouldn't want to look at the source code..
  
  
  
  
  
  

# conclusion:

doom, for everything

zed, for a quick sane defaults ide, and to focus on the work, and for ai workflows

focus, to just simply write/express, zero cognitive load

helix, for crafting the best key-bindings, with sane lsp/dap
  - (maybe can replace zed once scheme plugin system is out)

kakoune, for the unix dream

that is all.






also see [knowledge-bases]

stupid simple, fast editors:
  - can use these anytime, and for anything, even simple text files (replaces notepad)
0. **focus (editor)**
  - NOTE: still early in dev
    - lsp in next version (0.4.0)
  - finally. a god damn text editor that doesn't slow down the marvel of contemporary machinery!! gamers make the best shit.
  - great little design nuances
  - themes suck
x. sublime text
  - much loved for being fast, and handling big files
  - popularized the zoomed-out view
  - has lsp and ctags!
    - **ERROR: the ruby LSP was buggy as of 10/2024, creating multiple interpreters and leaking memory**
    - i filed an issue
      - https://github.com/sublimehq/sublime_text/issues/6523
        - **LSPs aren't maintained by sublime :/**
  - has aura theme!!
  - **shareware, bugs you about buying a license**
  
  
stupid editors with features by default (vs-code-like):
0. **zed**
  - I FOUND IT!! I FINALLY FOUND IT!!!
  - **just works**
    - **opened a ruby file, asked to install, and boom! lsp installed.**
  - lightning fast, making it hard to find reason to even use focus editor..
  - looks amazing too
  - combines slack, multi-player, ai, terminal, etc. but at 150mb and low cpu and low startup-times, still quick enough to fit here
2. lapce
  - vs-code in rust
  - quite behind zed, but not a startup-business, so it's still worth having as an open-source alt
x. vs-code
  - last resort, in case of specific extensions
  - everything *just works* with "batteries-included": file manager, git manager, terminal window, debugging window, beautiful themes (aura!), zen-mode, etc.
  - has multiple key-bindings extensions including one for helix and kakoune
  - **eats up cpu, memory, laptop battery, etc.**
  - hackable, but a pain to write extensions


semi-hackable, plugin-oriented editors:
0. helix
  - NOTE: once the gui and scheme scripting is out, i think it'll become my favorite.. i just find the terminal to be a clunky interface, and really miss using mouse/touch
  - a contemporary vi implementation in rust, with kakoune workflow, and with **sane defaults**
  - works in terminal (and thus great for remote terminal use)
    - but because of this, doesn't feel as good as gui editors... terminals are just a pain
  - a good step towards emacs
    - https://www.reddit.com/r/HelixEditor/comments/1b9gpz9/three_things_that_helped_me_make_the_switch_to/
      - an emacs user switches to helix and mentions some good plugins
      - TODO: try them!
  - TODO: a version with a file-tree feature is on a git branch
    - though, it intentionally avoids these features in favor of a more vi-style workspace editing via file/buffer list ui
  - scheme scripting coming soon!!
    - but just scripting, the core is rust.. so not as malleable as emacs, lem, or atom
x. nvim
  - painful config, terrible lsp plugins, zero discoverability, no design nuances, stupid religous bindings and community


hackable editors:
0. **emacs (doom)**
  - OMG. FUCK TERMINALS. THIS IS ALL YOU'D EVER NEED!!
    - replaces: text-editor, shell, file-manager, git app, knowledge-base, etc.
    - doom in particular makes vi-mode seamless across all these packages
  - **great discoverability makes it very quick to understand and extend**
  - potential is unlimited, written in lisp, **one tool-set to rule them all**
    - https://www.reddit.com/r/emacs/comments/1fh999a/is_emacs_still_the_one_in_2024_or_how_did_we_end/
  - **meow, the best key-bindings**
  - great way to build up own leader-keys / key-chords
*. kakoune
  - like helix without the batteries
  - for the unix dream
    - great for using/learning unix tools for everything
    - also great for using any language write to tools to do anything with kakoune
  - probably the most well scoped text editor..
?. atom
  - TODO: haven't tried..
*. lem
  - WARN: BUGGY as of 10/4/2024
  - looks like a great way to try common lisp without emacs
    - actually kind of a dream editor, writing tiny programs in sbcl..
  - also can be completely altered as it is written in common lisp, making it the most malleable text editor

complete IDEs:
  - vs-studio
  - jetbrains IDEs


other:
0. glamorous toolkit
  - TODO: try for smalltalk




key-bindings:
meow > my custom helix bindings > helix > nvim > emacs
  - text editing only

meow !== doom's evil bindings > helix > emacs > nvim
  - general leader-key-bindings for functions
  - meow provides a minimal start, made to provide space for personal customization, including doom's sane default emacs bindings under spc-x/c-x (via doom-meow)
    - this way, you can learn the way of emacs, and have the space (literally and space-key) to create your own set of key-mappings
  - doom's evil-bindings provides a complete package, of everything you'd ever need, creating many maps and key-bindings on the space-leader-key
    - it also provides optional alt-bindings for completion via the mini-buffer (c-j/k to move down/up)
    - it also provides optional alt-bindings for things like dired, etc.


some readings
  - note: typed the words since copy/paste in terminal isn't working.. :/
  - phaazon kakoune philosophy
    - the person builds a lot of pop text editor functions for kakoune, using unix cli tools
  - phaazon more hindsight vim helix kakoune
    - interestingly went to kakoune after helix, but ultimately uses both
  - esrh.me switching to meow
    - just details the improvements over vim, and even doom
  - rrajath ditching evil for meow
    - not much writing, but def has a solid emacs config!
      - moved to minimal-emacs.el






# gui editors:
## newer, simpler, things to try:

textbringer
  - an emacs-like machine using ruby
    - there's also a plugin for a mail agent and a mastodon client!

lem
  - unfortunately, buggy as shit: crashes when a pop-up window is open and you alt+tab away :( i was very close to really getting into lisp-mode too!!
  - still... quite a great introduction to lisp, as there aren't too many functions (unless you're hacking at the core of the editor..), and you can quickly write your own functions and map them to commands 'n keys, all in a few lines, all in one file... simple..!
    - though, if you're only using the functions given, then it would be no different than using helix and writing scripts with the functions it provides..
  - https://www.reddit.com/r/emacs/comments/1b4a2tq/what_do_you_guys_think_of_the_lem_ide/
    - emacs default key-mappings, Dired-like file explorer, Projectile-like stuff, Paraedit-like structured edit... sounds like it basically learned and took the good things from emacs with it
  - completely written in common lisp (sbcl?)
    - (emacs has a C core, particularly for it's display)
    - **and thus can be extended or completely altered in common lisp too :)**
    - fast, compiled
    - modular front-end: sdl2 for gpu-powered gui, ncurses for terminal
    - **great CFFI, thus easily allowing easy access to all C libs**, "which makes the world your oyster"
      - why doesn't emacs have it?
        - https://www.reddit.com/r/emacs/comments/16396v0/why_doesnt_elisp_have_a_c_ffi/
          - "I've been wondering why there isn't a C FFI which would eliminate the need for new C code to be written for every library integration, and which would allow everything to be written in elisp.""
          - "Political Reasons...However, I do agree that CFFI would have been helpful, not because it would make for less code, but because it would enable people to implement extensions without needing to wait for devs to make it available through the official release.
            Observe that tree-sitter was available as a module before it was available in the core, but for some reason, modules are not a thing in the Emacs community."
          - "As for FFI it is handy but it lacks compile time checking. It's not always easy to use ie converting pointers and C types. Emacs also has Emacs C modules which works nicely if you need to interface with C."
    - smaller, more manageable code-base
      - doesn't plan to become an OS
    - common problems of new projects: lack of docs, bugs, etc.
  - made specfically for common lisp, though it can support any lang
  - made by a Japanese person!

4coder
  - part of the handmade-hero movement
    - therefore written in C/C++, and also therefore **can be extended using just about any programming langauge**
    
lapce
  - STATUS: felt quite in development when i tried it last, with very few extensions/languages
  - yet another sublime/vs-code copy in rust
    - already has advanced features: modal, lsp, remote dev, built-in terminal..
    - **...but i don't see much point over zed, which is also written in rust**
      - focus on remote dev vs zed's focus on collaboration..
  - incredible speed
  - "Plugins can be written in programming languages that can compile to the WASI runtime (C, Rust, AssemblyScript)"
    - this is it's limiting factor, though AssemblyScript actually looks just like javascript!
    - although plugins can be written in AssemblyScript, it seems like first api's must be written in it's core language first: rust, therefore, in termas of hackability, it's less hackable than vs-code, which it is directly competing..


**glamourous toolkit**
  - kind of **the emacs of smalltalk**, but made in ~2020?, after 6 years of dev, 14 years of research
    - "It seems an editor/database query engine/ browser with a object oriented language Pharo as control/scripting language, while emacs is an editor with emcas-Lisp as the scripting language."
  - *the moldable development environment*: uses the features of smalltalk, especially it's built-in IDE, as tools to create your own specific applications: like for code-base exploration/documentation, build an editor, etc.
    - https://lepiter.io/feenk/what-exactly-is-glamorous-toolkit-v1-0--7sex44dze2dqlocqxwfz8ju0i/
      - "Our goal is to make systems explainable by means of custom tools created for each problem. Glamorous Toolkit makes this possible by making the creation of custom tools inexpensive and seamless."
      - "A central component in GT is Lepiter, the knowledge management system."
  - built on Pharo, though it's a project of it's own
    - renders crisply to retina displays compared to Pharo's native ui
    - "GToolkit uses a completely parallel graphics stack to standard Pharo. The VM and library ecosystem are still there but the UI is rebuilt from scratch on a modern vector based toolkit.
    
      The productivity of the GToolkit developers is impressive."




## newer alts
  - all of these are in heavy development as of later 2024


**focus (editor)**
  - the best text editor experience i've had in quite some time.. made me try sublime text, which is what it basically is: **sublime text with better design**
  - incredible speed, incredible defaults, incredibly simple, lives up to it's name and induces focus
    - **learn everything in 5 minutes: find file via fuzzy search, set up workspaces, command prompt, config**
      - very well designed find file in workspace and open file via path
    - great little view mode (c+a+arrow keys)
    - some sane defaults (and great sense of design) include:
      - great, simple key-bindings, closest to sublime-text
      - infinite undo-history for all files during the session, even after closing it..??
      - jumping the cursor back after highlight or viewing
      - saving config hot-reloads it
      - diff on the scroll bar
        - i forgot how gooood scrolling felt..!
  - gpu-powered gui, no terminal interface
  - **made with jai**
  
**helix**
  - STATUS: still developing gui-front-end, scheme scripting, but off to a great start as a terminal editor
  - kakoune with sane defaults
  - **the best key-bindings/keyboard-interface of all past worlds: vim, doom-emacs, and kakoune**
    - doom-emacs's intuitive pop-up menus
    - vim-like key-bindings, but more intuitive, lower learning curve, less key-bindings, and perhaps even less key-strokes
    - kakoune style more interactive workflow: selection -> action flow (vs vim’s action -> selection flow): wd vs dw
  - **great sane defaults with the most essential features already built-in, config-free(!!): tree-sitter, lsp, dap**
    - this makes it quite a great successor/improvement over kakoune, but i don't think it has as good shell integration.. yet?
  - "helix for vscode" extension to ease transition / aid in using both at the same time
    - TODO: ...no pop-up menus tho..?
  - vi/terminal/buffer/keyboard style navigation: file picker, buffers and buffer list, jump markers and jump lists
    - **requires a bit more cognitive load..**
      - often have to use terminal to navigate file-system, then opening helix is begin a "workspace" at the current location**
  - **because it was made for terminals, it suffers from a lot of terminal clunkiness**
    - mouse input, scrolling, etc. all just feel meh
    - **the ui just doesn't compared to gui, making it lack much sense of ui design**
  - **because the core is meant to be rust, and every other feature in scheme, it still lacks basic features as of 10/2024**
    - file/buffer/symbol tree
      - the vi/keyboard-style navigation is favored
    - zen-mode
  - scheme scripting
    - !!!, finally, get to use lisp :) 
    - https://github.com/helix-editor/helix/pull/8675
    - until the scripting feature is out, it lacks a lot of things that would likely become scripted plugins: file manager, more advanced debugging, etc.
    - though it will have lisp scripting, it is written in rust, and thus not really malleable as a program written entirely in a scripting a language, and definitely nowhere close to a program written entirely in lisp. in hackabilty, it's worse than vs-code, which is written entirely in a scripting language: javascript
  - rust
    - truly a force of reckoning those people




## newer standards
**zed**
  - windows binary not built for you..??
    - possibly an attack on windows, as atom was killed by vs-code, and github was bought out by microsoft
    - https://github.com/TakumiBC/zed-windows/releases
      - this repo uses github actions to build it for you
    - **seems to priortize mac os > linux > window**
      - probably for money reasons, as it's a vc-startup
  - vs-code-like features (terminal, file explorer, version control, etc.)
  - **ai-focused**
  - **multi-player**
  - gui/gpu-rendered
    - somehow **looks even more beautiful than sublime and even vs-code by default..!**
      - and has aura theme extension(!!) (had to manually install for sublime)
  - rust
    - **extensions must be written in rust (and compiled to webassembly)**
      - https://zed.dev/docs/extensions/developing-extensions
      - https://zed.dev/extensions
      - this def makes it harder to write extensions, but at least it'll be of higher quality, as the language itself will filter out programmers, and, it won't suffer from memory problems
  - from the makers of atom (and tree-sitter) at github





## current standards:

(emacs)
  - under [#classics]


**kakoune**
  - https://github.com/mawww/kakoune/blob/master/doc/design.asciidoc
    - the **DIY** unix editor, **modular**
      - a new classic in it's own category
    - **designed for interactivity**
      - **display edited text in real time, as opposed to vim's longer key sequences**
      - **select/highlight *then* action workflow**
    - **strictly adheres to the unix ideal**
      - pipe selections (via |) to unix/shell tool and replace selection with output, such as sort
      - select/"keep-pipe" (via $) using a unix tool, such as grep
        - note: these two are implemented by helix
      - **fifo buffers, a file/buffer that is read by kakoune, that an another program is outputting to, asynchronously**
        - this is one of it's main features
      - no plugins, rather, has `%sh{...}`(??) and socket interfaces and .kak bash scripts
        - **though great in theory, sucks in reality, as external programs/processess must be able to read the buffer and send something back, through the client/socket interface, and somehow work well together**
          - **tree-sitter, lsp, dap suck**
            - helix included these to overcome this limitation of kakoune, stunting kakoune's community
        - must write scripts (.kak) to glue / provide api to other programs
          - should mostly just be wrappers to cli programs
          - can be written in any language..?
        - can use shell expansion within kakoune command-line %sh{...}
        - can easily hook up fzf, yazi/broot, fd, ripgrep, etc.
          - **in <=50 lines of config**
        - **makes it rather unportable**
    - minimal design
      - only text editing, nothing else
        - not even built-in language support (must write a `kak` script file), no built-in lsp nor tree-sitter
          - this is def what killed it
          - there is an lsp plugin (kak-lsp), but no tree-sitter (phaazon is writing one, still in dev as of 10/2024)
        - no system-clipboard, no surrounding-pairs, no nothing
          - though, there are likely plugins for these things..
    - **linux only?**
    - **terminal only?**
    - 2011
    - source: "why kakoune" site
    - source: great answer in reddit comment on: "anyone still using kakoune?"







## ew or problems

x/vs code
  - made using electron (web stack rendered by chromium/node.js). and therefore:
    - PROBLEM: **heavy, uses a lot of RAM and CPU, eats up laptop batteries**
  - so dominant that it made most other editors abandonware
    - cross-platform, open-source, community-oriented, electron/web-style-dev, all helped it sky-rocket past previous-gen text editors
      - **by far the most extensions thanks to having the biggest community one-click install**
        - NOTE: this is the main reason to use it
  - has extensions for all of the classic key-bindings
    - "helix for vs-code" is good, merging helix bindings with vs-code bindings and gui cursor, but missing the pop-up menus
  - plugins are a bit of a pain to make, especially compared to the lisp-extending experience, thus creating a barrier between you and and the ideal editor experience
  - simple, easily-recognizable os-like gui: tabs, show/hide panels/windows
  - 2016


(note: i missed out on the atom vs sublime generation)

x/atom
  - NOTE: i never tried this one..
  - set many standards:
    - **the electron framework** (see the relation in it's name?) was created in the process of making this
    - **tree-sitter** was also developed by github for the project
  - **hackable to the core**
    - unlike vs-code
  - ...people don't seem to have liked this one.. probably for the same reasons they don't like vs-code..
    - sublime text was much favored due performance of C++/native
  - though historically important, basically replaced by vs-code, since microsoft had acquired github..
    - **github ended maintenance on it at the end of 2022**
  - made by github!!


x/sublime text
  - BUG: ruby lsp
    - this stopped me from working in it (see above in conclusion)
    - PROBLEM: **lsp plugins are not maintained by sublime, thus still relies on community, which is much smaller than vs-code, emacs, nvim**
  - **the best simple gui text editor, replacing notepad++**
  - **designed for speed and simplicity**
    - **written in C++**, extensions written in python
    - **30mb, fast, simple**
      - thanks to this, imo, beat out both atom and vs-code
  - **great defaults**
    - took a few minutes to setup lsp, just use command pallette -> install packages
      - just as seamless as vs-code! i only had to install the theme manually
      - config files are seperated by extension, as opposed to vs-code, which has it all in a single file
    - looks great too, and has aura theme
  - all the standard features: file explorer, zen mode, etc.
    - **the product is complete**, nothing to add, just fix bugs for a long long time
  - extensions in python
    - terminal, git, etc.
      - because the extensions are written in python, the cross-platform terminal (terminus) had to be written in python too :/
  - perhaps the most loved text editor pre-vs-code, the real victor vs atom, but eventually lost to the momentum of vs-code's open-source community
    - perhaps used to require more effort to install extensions..? now seems just as easy...
  - **shareware (as in winrar closed-source bug you until you buy a license)**
    - **closed-source**
      - **must use provided python api to write extensions**
    - **$100 for a 3 year license, or, bug you from time to time :/**
    - this def killed it..
    - sublime merge is another app that's really well regarded too, perhaps also shareware..?




## old standards / history:

### basic gui classics:
**komodo-edit**
  - my fav from college ~2007
kate
  - a linux classic?
notepad++
  - a windows classic, same as ever, still cute and functional for an old 90s thing
textmate
  - a mac classic
**notepad2**
  - a classic windows notepad replacement
  - TODO: try notepad4




*the* classics:
notably, most current text editors still use the key-bindings from these two editors: neovim for modal text editing and emacs for non-modal. So, once you learn one of them, newer editors often provide bindings for both. i think vscode derives it's key-bindings from emacs.

though both originally were cli/terminal apps, now emacs is a gui, and even neovim has neovide (rust)

**emacs**
  - much more than a text editor, it's basically an OS! based on around text buffers
    - **this has the great benefit that everything is written in the same language, morever, the most dynamic language of all time. Otherwise, you'd have to use an entire set of tools, wherein each tool can be writtern in a different langauge, have different onpinions, and just not work as seamlessly together: terminal, terminal multi-plexer, text editor, git tui, file-manager tui, knowledge-base tui, and so on.**
      - **at the moment, for me, all of the tools i use are now written in rust, which is infinitely harder than lisp to edit, let alone develop.** The language itself is complex, along with it's memory-management model, and it's build process.. It's all a pain. Whereas with emacs, you just need to know one language, no memory-management, no build-process(?)
      - also, simply, **none of the other languages are as dynamic as lisp**: you can't simply just create a function for the program. For every C-like program, including rust, an interface (ffi) is required, and then another dynamic language is used (lua, lisp). In that case, why not just use lisp to begin with..?? **Lisp just seems like the right choice for programmers' tools.**
      - i think this thought continued to this reddit post i made:
        - https://www.reddit.com/r/emacs/comments/1fh999a/is_emacs_still_the_one_in_2024_or_how_did_we_end/
  - elisp macros
    - actually a joy to use (especially when compared to vimscript!!)
    - because it's lisp, you're basically writing the program itself, not merely some plugin manager
  - mature (possibly the oldest of all currently used code), well-written plugins
    - org-mode
      - **the ultimate knowledge-base software, simple yet powerful**
      - **org-babel**
        - can combine programming languages, using the output of one as the input of another, perhaps similar to the much much later jupyter notebooks
    - magit
      - **the best git experience**
    - auctex
      - the best latex experience
    - slime (common lisp), geiser (scheme), cider (clojure)
      - **the best lisp dev environents**
      - portacle is an emacs config set up for common lisp dev
  - "m-x is godsend"
  - x/slow startup time
    - used to be slow, but with emacs 28, now there's **native compilation**..!
      - https://www.youtube.com/watch?v=bhjO22s6snU
        - how it was made, presented by it's maker
  - **doom-emacs**
    - a great starter config that makes a really nice onboarding experience
    - *i really really liked this, found it very quick to find and precisely just what i needed*
    - **intuitive space-bar menu to ease learning**
    - **contains evil-mode / vim-keybindings by default**
  - **meow**
    - **the best key-bindings of all!**, even better than helix/kakoune!!
    - **meow-doom** integration
      - **the best starter-kit combined with the best key-bindings!!**
        - THIS IS IT!! IT DOESN'T GET BETTER THAN THIS!!!
  - prelude
      - a light-weight starter kit closer to vanilla emacs, in case doom is too much, or if i want to make my own
  - minimal_emacs.el
    - another minimal/light-weight starter-kit
  - every person that i've personally met that uses emacs is a great great programmer/problem-solver/doer
  - emacs itself is a deep pot of speghetti, and as there are no other great alternatives (that can compete with it's power/flexiblity/ease-of-extending), they get so deep into it, that there's no reason to use another tool
    - 1.7 million lines of code
      - 30% in C
      - ~1500 primitives??

  https://batsov.com/articles/2024/02/27/m-x-reloaded-the-second-golden-age-of-emacs/


x/neovim (nvim)
  - NOTE: i must have tried this soon after lua support was added, and people were still migrating, as were plugins
  - "With the 0.5 release of Neovim on 2 July 2021, it gained built-in support for the LSP, Tree-sitter, and more complete Lua support – including the support for configuration scripts written in Lua instead of VimL."
    - really slow to catch up to the times
    - as of 2024, 40% is still written in vimscript
  - terrible experience setting up lsp, as there were 3-4 various plugins, all of them require config, all worked half-assed, with CoC having the best results and being general. best to just use the built-in lsp with lua, but, meh. even that required config


x/vim
  - vim
    - modal (normal, insert, visual/select, command)
      - **requires quite a heavy cognitive load**
    - *heavily* key-board input user interface
      - i personally feel more comfy using a touch-screen/mouse/keyboard combo
      - it's legacy is based on it's key-mappings: modes, motions, actions, etc.
    written in C and vim script
    - and vimscript is terrible
  - horrendous amount of time wasted starting out from scratch, reminiscent of the terrible linux config experience, but worsened by archaic language and the unprofessional open-source community it attracts
    - best to try various starter configs with sane defaults
  - a very very bad learning curve, especially from vanilla neovim. bad for learning the key-bindings. bad for setting up for development. bad for finding good sources to do everything. just plain bad.





IDEs:
mostly langauge-specific
  - and therefore limiting for general-use, when using many languages, in addition to simple writing / note-taking

generally adds these features: **integrated interactive debugger, profiler**, advanced code completion, advanced refactoring, better file navigation (go to definition in deep libraries 'n back), tasks runner (including tests), database integration
  - though, nowadays, with LSP an DAP protocols gaining popularity, only the most advanced features make IDEs stand out

**vs studio**
  - the standard advanced IDE with the most features
    - it's combo with C# set the standard for IDEs
  - seems to be mostly focused on C/C++/C# compared to other langs..??
  - microsoft
    - therefore took a long time before making vs-mac

various IDEs by JetBrains
  - seems to fill the gap vs-studio has left with other languages
  - seems annoying to have a different IDE for every language... only nice for huge projects written in a single language, but nowadays, a single project can be written using multiple languages!..
  - quite special for having good IDEs for dynamic languages like ruby and python
    - https://www.reddit.com/r/ruby/comments/11ji4u7/rubymine_or_vs_code_extensions_for_debugging_in/
      - "I keep trying to switch off of Rubymine and I keep going back. Debugging in Code is good enough, like no issue, once you find the right combination of articles to help you set it up. Autocomplete, intellisense, and similar are much worse, whether you use Solargraph or Sorbet + Ruby-LSP, and there are essentially zero refactoring actions. But the real killer feature for me is that Rubymine let’s me search, add breakpoints in, or jump to a definition in gems used in my application."..."But the real real killer feature is that it all just works, no hassle. Sure it’s a little sluggish sometimes. Sure the interface is a lil heavy. Sure the plug-in ecosystem is way less active. I got work to do, damnit."
  - recently seperated into language specific IDEs:
    - https://www.jetbrains.com/ides/
    - rubymine
      - ruby, the standard for it
    - rider
      - c#, games?
    - intellij
      - java, jvm langs?, the standard for it
        - i think this was their first/main editor that started their business
    - pycharm
      - (python)
    - etc.




https://pawelgrzybek.com/the-joy-of-learning-helix-and-probably-other-modal-terminal-based-editors/
  - todo: read


