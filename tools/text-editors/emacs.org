
NOTE: this file serves as a test for org-mode


* some thoughts
slowly but surely, emacs and i are becoming one.

- should think about how this differs from tabs..
  - buffers and windows are seperate, so tabs are just windows


* sources
tips, tutorials, help:
https://github.com/emacs-tw/awesome-emacs#tutorials
discord
discourse
zaiste video series


configs of great programmers:
https://gist.github.com/amirrajan/b3e4af5e06ad46e1b390aae2d0a44e47



* praise
gui, compiled
  - can start from terminal via 'emacs' command or from the chrome startup menu search thing
    - TODO: what about doom run..?
  - *UPDATE: OMG, muuuuuuch better after getting gui to work, and quicker too! <3 <3*
  - yeah, fuck terminals!!

e-shell
  - spc-o-e
  - incredible, providing auto-complete, etc., and retains the bindings and theme of emacs. it just works like fish shell and wezterm

dired
  - not quite yazi, but with emacs, it can't be beat!



* TODO config
c/fix emacs gui for chromebook
  - wayland display error :/
    - i think it worked after running it via user instead of using sudo!!??

set-up git
  - i think `gh auth setup-git` doesn't work with magit.. though, there is a gh cli package: consult-gh
    - TODO: setup git
  - sync repo
    - TEMP: installed github desktop, so i just don't have to worry about version control
      - can slowly transition to magit

backup doom config files
  - TODO: create an elisp function to do this
    - asks you where to save it
      - similar to how dired-do-copy works

load org repo on start
  - TODO: merge my-programming-stuff into main notes?
    - TODO: currently using my-programming-stuff as my temp org folder

*sort m-x functions by which has been binded*
  - in order to make it more intuitive to learn a mode
  - no clue how to order them by use..
    - plain keys, keys with modifiers, others?

*try to merge doom's evil key-bindings for many other places:*
  - *completion in mini-buffer*
  - *dired*
    - truly garbage key-bindings: ^ for up directory?? vs h/l for up/down directory
      - h, help
      - l, refresh/relist
  - *c-x*
  - *org*
  - c-c?
    - slowly..
  - etc.

*compare 'n combine meow/default and doom key-chords*


* config

*NOTE: don't you ever use it as admin/sudo!*

see config files for notes on config
  - self-document!

*NOTE: first set up the right font and font size, it makes a big big difference!!*
  - can see a lot more in the mini-buffer!!
  - set font in terminal app settings or in doom's config.el

magit
  - is really good, def the emacs and git ways.. but i def prefer github desktop..!




* workspace basics
it's nice to have dired open, when working within a project, to have a sort of visual view to come back to
  - TODO: maybe there's some kind of file explorer plug-in that can pop-up via a F-key

it's similarly nice to have an i-buffer window open, to visually see which buffers are open

if working quickly, just do quiksave/quickload (on doom's splash screen)

projects vs workspaces vs persp(ective)

* bindings

** a few quick ways to learn:

learn x in y minutes / emacs

f12
  - gui menu
    - sometimes shows bindings for the menu item/command
    - TODO: how is this created..?

c-c
  - for major modes

spc-h-b-m
  - a better view of key-bindings quicker to undertand key-bindings than h-m..!

spc-h-spc-m
  - describe-mode
    - TODO: can't find this in the meow bindings..?
    - replaced by main info-emacs-manual
      - TODO: i might prefer it binded to h instead..

spc-h-M
  - doom/describe-active-minor-mode

emacs shares movement commands with bash
  - ugh... no wonder why it's so terrible!! :'(
  - but.. not bad if you still use shell, and even ruby 'n perl/raku!

[movement-command],[number]
  - repeat movement

emacs/meow philosophy
  - TODO: though, could add F for reverse find
    - no built-in function..? maybe emacs prefers moving forward only..?
  - helix used shift as a reverse modifier, i don't think emacs uses that idea..

** some useful bindings

c-arrow-keys
c-m-left/right
  - TODO: c-m-up/down broken
m-down/up
  - sane navigation bindings :D

[[cmd:recenter-top-bottom][c-l]]
  - center, top, bottom
    - *super useful*, never used this feature in another editor..

m-s-right/left
  - move list indents
  - TODO: is this part of org-mode..?

c-s/c-r
  - isearch forward/reverse
    - TODO: redundant, could use shift instead






some notes:
 - NOTE: it's still vi, so still need to re-map caps lock to escape
 - NOTE: f1-key is tough on a chromebook keyboard, but quite useful!

help:
press the initial key-chord, then, in the popup mini-buffer, press c-h to fuzzy search it
  - TODO: why is that not the default..?



*** meow bindings

TODO: finish [[fn:meow-tutor][meow-tutor]]



** key bindings (actual keyboard keys)

TODO: merge from my helix and wezterm bindings

spc-?
  - show cheat-sheet

spc-/
  - meow-keypad-describe-key

*** TEMP
i'm guesing c-[key], c-[key] chords were chosen over c-[key], [key] as they would cause less mistakes..? yet, both are used..??

TODO: play with all the main spc bindings

- spc-b-x / spc-x
  - make a scratch-buffer in a split-horizontal-window

*** normal (no modifier key)
  - hjkl
  - g
    - cancel selection, instead of ;
  - w/e/b & W/E/B are much improved!
  - i/a/A/I
    - no need for o/O (open below/above) in vi
  - z
    - undo cursor position
    - TODO: Z should be redo
  - d/D
    - reverse delete!! (alt to backspace)
      - *TODO: try practicing this..?*
  - s
    - pro-tip: pressing s when nothing is selected kills to end of line!!: genius!
  - n
    - search last selection
    - meow-search
      - TODO: no meow-reverse-search function nor binding for N
  - o
    - (meow-block) seems like helix's extend_to_parent_node, but strangely seeks out the end of the next set of brackets first..
      - ohhhhh, i think i understand.. it's made for lisp! this and O really is all you need.. emacs and lisp must have been incredibly productive back in the days..
      - quicker than ,/.r/c
      - maybe the major-mode re-binds this..?
  - O
    - (meow-to-block)
  - [ begin [thing]
  - ] end [thing]
    - use this for select to end/beginning of line: [,l and ],l; removes the need for creating key-bindings for this in helix. though quite important keys, it makes sense to put them here
  - , inner [thing]
  - . outer [thing]
    - replaces m (match) key-map of helix, which felt confusing 'n convoluted anyway.. having to press mim or mi(. using letters is much better
  - m merge?
    - seems to select the space between this line and the end of the last line, where after pressing s/kill would merge the two lines
    - also places the cursor at the first-non-whitespace in the line, unlike x
      - m, a
      - m, i
  - x
    - x, a
    - x, i
  - ' repeat
    - this is a blessing!! (it wasn't working in helix..)
    - f/t, '
      - find/till char, repeat
    - ]d, '
      - next function, repeat
  - ; reverse cursor position on selection from kakoune
    - not only reverse cursor position, but reverses the direction of interactive selection!!
  - r replace
    - works as expected! (unlike helix..)
  - TODO: N reverse-search missing?

  - unbound:
    - q, T, F, V, <, >, /, {, }, :, ", _, =, \, |
      - avoids mapping to non-nmeumonic(?) symbols

  - *advanced meow functions:*
  - v visit
    - *TODO: hmmm, a very simple search buffer by word?? it's an interesting filter though.. try it out!*
      - not sure when i'd use this over spc-s-s/S..
    - replaces / in vi
  - U
    - *undo in selection*
  - P
    - *yank from kill ring* (meow-yank-pop)
      - stores killed and yanked text
  - X
    - meow-goto-line


  - G
    - *secondary selection*
      - hooooooly shiiiit
    - meow-grab
  - R
    - *swap with selection*
    - meow-swap-grab
  - Y
    - copy primary selection and paste over secondary selection
      - great in case you are in the area you want to paste in first, a sort of reverse copy/paste
    - meow-sync-grab


  - *TODO: how to do multiple cursors??*
    - meow uses god-mode which binds spc-m to meta menu
    - spc c spc m
      - found in doom bindings..

x and w
  - triggers meow-visual-line / visual-line-mode
    - then can press arrow keys, or [] (begin/end of thing)

basic navigation is redundant:
  - TODO: change it? or leave it, as that's the default emacs way..?
  - c-f/c-b and c-n/c-p == hjkl
  - m-f/m-b == w/b
  - c-a/c-e == x,i/x,a

after selecting something (with anything: x, w, W, [p, ].), can press any number to select that number of things


*** [f-keys]

NOTE: with a with a chromebook, i re-bind the search key (below tab) to escape, which blocks the default search+function key binding
  - so, i can't use these anyway! which is good, as i really shouldn't..

cam keep these empty for project specific bindings, like calling scripts, ci/cd, etc. project actions

*maybe intentionally left empty by meow.. because it's neither mneumonic nor easy to remember*
  - c-k
    - seems to cover the standard f-key bindings anyway..
      - TODO: check doom for f-key bindings
        - likely the normal vs-code stuff..
  - indeed, it's better to not bind anything

**** only these two are useful:
f1
  - help
f12
  - *gui menu*
    - also can get here by clicking on various items on the status-line
      - major mode menu, minor mode menu
      - version control menu
      - line and column menu

**** TODO the rest can be unbinded:
f2
  - 2C 2 column functions
  - c-x 6
f3
  - define keyboard macro
  - NOTE: redundant, can remove
    - c-x (
      - strange
   - maybe it's a good place, to allow you to use any other key, including key-chords, within the macro..?
f4
  - execute keyboard macro
    - c-x k k
      - again in normal mode
    - a little too deep..


*** s-[key]

s-right/left
  - highlight char right/left

s-up/down
  - highlight going up or down
    - one of those simple things that helix's defaults failed to do

*** c-[key] and m-[key]
TODO: i haven't even got to these yet..!

**** some basics:

c-k
  - kill-line
c-j
  - return-and-maybe-indent
  - same as ret
    - TODO: seems redundant.. can try using it instead of return tho..

c-l
  - toggle center/peek bottom/top depending on cursor position
    - a very interesting key..

c-a
  - beginning-of-line
    - this combined with f simplifies cusor placement
c-e
  - end-of-line

c-ret
  - +default/new-line-below
    - does exactly what you want!
  - org has it's own function

c-[arrow-keys]
  - *basic nav*
    - *very useful*, usually beats ][ (end/beginning of shortcuts)

m-down/up
  - page down/up

m-right/left
  - *swap with previous/next word*
    - *TODO: this might be the first binding i want to change.. i never use this..?? and it messes me up!*

c-/
  - undo-fu-only-undo
  - vs u for meow-undo
c-s-/ or c-?
  - undo-redo
  - TODO: def need a new binding for this..
    - U?
      - U for meow-undo-in-selection
        - *hmmmm.. that's quite powerful actually.. wow..* i think i'll keep that..!
  - *vundo is really useful too*
    - interactive undo/redo timeline

**** others

[empty]
** modules
*** magit
github desktop, or likely any other gui, seems to be much simpler to grasp and use.. However, upon my first comparison, *it seems magit show far more details in the diff changes, whereas github desktop glances over it*, just highlighting the whole line red or green. So, it may be worth playing with some more..

spc-v
  - version control
  - enable magit and vc-gutter modules to show git functions

spc-v-g
  - status
  - start here

P push
  - p push (default)
    - main/origin?
  - u upstream?
    - main/origin?
*** dired
mark files 'n folders, then take action
  - and remember, can use favorite emacs commands to search text in the buffer!

m(ark)
u(undo)

capital keys for actions, for safety reasons
  - R, D
    - R is mv, use it for rename, move, cut/paste


* leader keys

NOTE: read [[file:/home/ra/.doom.d/modules/editor/meow/config.el][meow config]]

NOTE: SKIP TO [meow leader keys]
  - you don't need to know the rest (doom, original emacs)

** god-mode/meow

adds an alternate spc key-chord for modifier key combos
  - NOTE: some of these are hidden from the meow menu..

  - spc-spc
    - set mark
      - TODO: hmmmm, must be important..

  - spc-x-[key] (c-x, c-[key])
    - NOTE: the second letter is automatically adds c- modifier
      - TODO: how to use use a normal letter..??

  - spc-c-[key] (c-c, c-[key])

  - spc-m-[key] (m-[key])
    - a good way to see otherwise hidden bindings

  - spc-g (c-m-[key])
    - go
      - more navigation stuff..??
        - TODO: looks pretty useless.. might be able to easily trim this off..
          - basic navigation via hjkl, arrow-keys + modifiers, ][, seem to cover most of it..
      - matches c-m-[arrow keys]

  - spc-x-spc, spc-c-spc
    - *doom's bindings*
      - *very useful to intuitively find more useful functions from doom's config..*
        - TODO: merge c-x functions and spc (doom)
          - sould be pretty easy..
        - TODO: marge c-c function over time (major-mode-dependent)
          - this shit never ends..!

** key chords
spc (meow)
  - moew bindings
  - *NOTE: m-spc in insert mode* (moew)

spc (doom)
  - NOTE: no way to access from meow..?
  - see [[file:/home/ra/.emacs.d/modules/config/default/+emacs-bindings.el][emacs-bindings.el]]
    - doom's "sensible default key bindings for non-evil users"
    - doom-meow uses this, only altering it slightly:
    - c-c(ode) -> c-k
      - to keep c-c
    - TODO: c-m(ultiple) cursors -> ??
      - to keep c-m

    - TODO: grab bindings from here
      - neotree?
        - TODO: try enable module?
        - f9
      - remote menu?
        - c-r
        - TODO: try enable 'upload' module
      - TODO: try using one of the e-mail modules!
    - TODO: alter mini-buffer auto-completion bindings
      - find
        - ;;; completion (in-buffer)
        - (:when (modulep! :completion company)
      - c-n/p
      - *NOTE: c-s to show search history*
      - *NOTE: m-s to use regex search*
    - TODO: ivy vs verico vs helm search??
    - TODO: wtf is this binding?? replace for o
      - ;;; expand-region
      - "C-="  #'er/expand-region
    - TODO: enable fold module
      - c-c f

  - TODO: see +evil-bindings
    - take what you want from here, but only after using the emacs bindings of that thing


m-x / spc-m-x (meow/god)
  - contains every function available (~7500 with default doom install, ~6750 with meow instead of evil key-bindings)
  - usually [module]-[function]

:[command] (evil)
  - NOTE: m-x !== :
    - there's sometimes a different number of functions...
    - i think the way they fuzzy find is different..

c-x / spc-x
  - meow's emacs bindings, which remains closer to emac's default bindings
    - *TODO: or is it the default emacs bindings..??*
  - it has a few funky bindings... i guess that's why doom had to create some sane defaults for it
  - i guess here for consistency, as it will be used by many modules
  - *TODO: NOTE: still has a few very important functions:*
    - buffer
    - save
    - close
    - dired-(j)ump
    - tab indent interactively!!

c-x, c-? / spc-x-spc
  - doom's "sane" emacs bindings, many similar to doom's space leader key, itself similar to emac's original bindings
   - looks really strange.. full of functions i wouldn't use..
   - better to look at doom's spc-keymap

c-c, c-?, spc-c (in meow)
  - *major-mode bindings*
  - *NOTE: doom's c-c, ? has a lot more functions. if you're looking for something, it could be found here*
  - *this is a great way to quickly and intuitively learn the main functions/bindings of a major mode*
    - *TODO: how to scroll through the c-x list..?*

c-c, l / spc-l (meow)
  - +localleader
  - *TODO: another optional set of major-mode bindings?*
    - for example, in org-mode

- spc-g == c-m
  - pure text editing stuff
    - jump, mark, regex, lisp stuff

- spc-spc
  - binded to c-spc
    - set-mark-command

  





**** meow leader keys:
  - NOTE: uses a different set of bindings in meow-doom
    - but looks like the default bindings...??:
      - (default +bindings +smartparens)) ; NOTE: needed for meow
      - at the end of init file
    - NOTE: doom's space key-chords are far more intutive (especially if coming from vi), whereas meow's are sparse, perhaps closer to vanilla, in need of customization..?




TODO: import leader key bindings from helix
TODO: import doom leader key bindings
  - it seems very close to c-c, ? (in no major mode?), but not quite, as it's missing buffers, vi shortcuts (search in file/cwd), other shortcuts, etc.
    - though, the search commands are neater beneath spc-s..
  - see [[file:/home/ra/.emacs.d/modules/config/default/][doom bindings]], evil-bindings.el seems to have everything... hmmmm, can that be stuffed under spc-d?

initially can keep them seperate, in seperate keys (spc-[key]), likely under spc-d, spc-j, and keep spc-j as my own custom menu


see /home/ra/.doom.d/modules/editor/meow/autoload/bindings-qwerty.el
  - TODO: not sure how to paste a link in the mini-buffer..
  - this has a list of functions
    - TODO: use org-babel to display the reference code in this file?

spc (meow)
- moew bindings
  - TODO: find a way to add name to the leader category
    - instead of 'v' show '(v)ersion'
  - mneumonic
  - &
    - aya/yas
  - tab
    - pro-tip: if a region is highlighted, auto-indents
    - alt: spc-a-tab
  - a(ction) embark-act
    - *interactive way of using the selected region to do something*
    - by default, if nothing is selected, it'll select the current line
    - search
    - format
      - | shell-command-on-region
      - macro
        - keyboard macro, not lisp macro..
      - align
      - delete duplicated lines
      - indent
      - lots more..

      - next item (org-next-item)
      - previous item
        - *an interactive way for navigating an org file*
          - whoa.. this shit never ends..! :D
            - i love it, lol. *emacs is an endless game for interacting with text*
  - eval
    - TODO: don't think this deserves an entire key..
        - maybe more useful for lisp..??
  - file
    - f, F (spc-spc in evil/helix), r, d, p
      - pro-tip: spc-f-f creates a file if it doesn't exist!
    - m(ove)
      - much better than jumping to terminal..
  - insert
    - unicode, emoji, file-name/path
    - TODO: never use..
  - j
    - NOTE: well-placed key left un-binded for the user to create their own menu..?
  - k(ode)?
    - k
      - doc
    - d(ef)
    - *lsp*
      - i think it was chosen due to it's location: the most used key
  - l(anguage)? (c-c, l)
    - *major-mode bindings*
  - notes
    - org-mode notes
      - TODO: set-up org notes folder
        - *HOLY SHIT, really need this..!*
  - open
    - shell, debugger, TODO: seems like a good place to open other programs..
  - project
  - quit
    - quickload, quicksave, etc.
  - search
    - search (buffer) (/ in evil), project (spc-/ in evil), cw(d)
    - otherwise, can use spc-a-(c+)s/r
  - universal
    - TODO: meow-universal-argument
  - toggle
    - zen/Zen full-screen, word-wrap, line-numbers
  - workspace
  - version control
    - g (= magit command)


  - / meow-keypad-describe-key
    - maybe useful if you don't have enough screen-space to see the commands in the mini-buffer..?
    - c-h k for describe-key-briefly
      - TODO: might want this instead..
  - ? cheat-sheet

  - buffers
    - TODO: NOTE: missing... is it expected to use the default emacs key chords? spc-x, b/B, k/K, etc.
    - i mean, maybe there aren't enough bindings related to buffers forit to have it's own key-map










*** some useful key chord bindings from the original emacs bindings

TODO: bind vundo!!


TODO: merge with above..


c-x/spc-x (spc-b in doom?)
  - *TODO: create another binding for this..?? or keep the original emacs way?*
    - *create my own menu via spc-[my-key]*
      - *start with nothing, building up from scratch*
    - *spc-j is a good start*
    - *or could put under spc-f, to make it files 'n buffers*
      - spc-f-b/B are unbound!
     
  - buffers
    - NOTE: this menu is missing in meow
    - ordered by use:
  - s
    - save
    - bad habit..
  - b/B/spc-b-i
  - *buffer list in dired* and *search buffer interactively*
    - exactly what i wanted when using helix!!
  - switch-to-buffer vs persp-switch-to-buffer
    - found in doom bindings
    - it seems persp gets rid of the recent files list and all of emacs temporary files
      - TODO: update binding
  - k/K
    - kill
  - left/right
    - next/previous buffer
      - TODO: yay!! can finally use, now that gui emacs works!!
        - try this out some more..

spc-</>
  - switch buffer
  - strange binding..
    - i don't like holding shift on a second key.. but it is closer than the arrow keys..
    - NOTE: i think needed for when terminals mis-input arrow keys
      
c-x, </>
  - scroll left/right??

spc-x-2/3/4/5
  - *TODO: window management is also missing in meow..*

spc-x-;
  - comment-line
  - maybe now under spc-c, depending on the mode..














* pre-configs

https://github.com/emacs-tw/awesome-emacs#starter-kit


*doom-meow*
  - what i'm currently learning/discovering emacs on..

*DOOM*
  - i had a great initial experience using this, felt wayyyy easier and way more intuitive than using neovim!
    - helix seems to have taken much of it's space-key-chord shortcuts from doom, making it an easy jump
  - "tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system."
  - "fast, closer to metal, opinionated, no forced plug-ins, nix/guix"
  - 150 modules!
  - "If you want something closer to what you know, and less involved to customize (less barebones basically), doom is what you want."
  - "I have tried them both and vanilla as well. I like doom the best - it has better shortcuts out the box, less buggy, uses traditional elisp for configuration as opposed to spacemacs which uses a proprietary thing you have to learn."
  - recommended by that one emacs guy from noisebridge

x/spacemacs
  - "a community-drive emacs distro"
    - sounds like 'oh my zsh', which is *not* good

prelude
  - way more stripped down, much closer to vanilla emacs
  - Prelude is basically a very light starter kit, whereas doom is a whole garage full of tools. (This does not mean doom has more utility, it just comes with more going on out of the box)
  - recommended by that one emacs guy from noisebridge





* doom
** install (doom)
follow the directions on the github
fish_add_path ~/.config/emacs/bin

windows:
scoop install emacs

set $env:home = "$home" in powershell profile
append $home/.emacs.d/bin to path

make folder in $home/.emacs.d
copy a clone of the doom repo there

doom sync
  - doom sync --aot
    - compiles natively
      - TODO: test if worth or not... maybe not worth it if updating frequently..
doom doctor
  - check for problems
doom run

NOTE: at the moment, must use bash to run it:
."C:\program files\Git\bin\sh.exe
  - run git bash
    - i think exists under msys2 (installed via scoop) too
doom run

add a shortcut
  - "C:\program files\git\bin\sh.exe" -c "/c/Users/ra/.emacs.d/bin/doom run"

..YAY! :D



https://gist.github.com/rahil627/e9d150adc8dcc36846f5f6d0a4465665
  - my gist on installing doom for chromeos, including building emacs 29


** notes on how to maintain doom (+ post-install notes)

from github repo page:
doom sync
  - to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private init.el or packages.el, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).
doom upgrade
  - to update Doom to the latest release & all installed packages.
doom doctor
  - to diagnose common issues with your system and config.
doom env
  - to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your PATH, among other things.
doom build to recompile all installed packages (use this if you up/downgrade Emacs).



post-install notes: (from the doom install cli script)
But before you doom yourself, here are some things you should know:

1. Don't forget to run 'doom sync', then restart Emacs, after modifying
   ~/.doom.d/init.el or ~/.doom.d/packages.el.

   This command ensures needed packages are installed, orphaned packages are
   removed, and your autoloads/cache files are up to date. When in doubt, run
   'doom sync'!

2. If something goes wrong, run `doom doctor`. It diagnoses common issues with
   your environment and setup, and may offer clues about what is wrong.

3. Use 'doom upgrade' to update Doom. Doing it any other way will require
   additional steps. Run 'doom help upgrade' to understand those extra steps.

4. Access Doom's documentation from within Emacs via 'SPC h d h' or 'C-h d h'
   (or 'M-x doom/help')

Have fun!

** install icons
run nerd-icons-install-fonts function within emacs
  - TODO: not working..

** install meow key-bindings for doom
doom-meow
https://github.com/meow-edit/doom-meow
mkdir -p ~/.doom.d/modules/editor && git clone https://github.com/meow-edit/doom-meow ~/.doom.d/modules/editor/meow

Enable this module in your doom! block. (add (meow +your-desired-flags...) after the :editor section in init.el)

After you doom sync and restart Emacs, Meow will start in Normal state, so make sure that bindings have been set up; see Module flags.

The leader and localleader bindings are defined in <a href=”doom-module::config default +bindings”>doom-module::config default +bindings, so that module is required for them to work.

This module will not work smoothly with doom-module::editor evil, doom-module::editor god, or doom-module::editor objed. You must disable those modules in your doom! block to use this one.
